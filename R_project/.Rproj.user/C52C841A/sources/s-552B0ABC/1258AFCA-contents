## All my Code -Lydia


#############################################
#Quality Control
#############################################

#Load Libraries
#------------------
library(affy)
library(vsn)
library(AnnotationDbi)
library(mouse4302mmenstcdf) #download source files from brain array for "Affymetrix Mouse Genome 430 2.0 Array"
library(mouse4302mmenstprobe) #download source files from brain array for "Affymetrix Mouse Genome 430 2.0 Array"
library(hexbin)
library(limma)
library(AnnotationDbi)
library(tidyverse)
library(pheatmap)

#packages for k-means clustering
library(factoextra)
library(ggpubr)
library(EnhancedVolcano)
library(FactoMineR)
library(ggbiplot)

#Read in .CEL files 
#----------------------

setwd("./rawdata")

data.mouse=ReadAffy()
data.mouse@cdfName <- "Mouse4302_Mm_ENST"

setwd("..") #go back to directory above the current one
setwd("./sessions")
save.image(file="rawdata_mouse_28389.rda")


#Quality Control
#-------------------------
#Single Chip Control
#-------------------------

#x11(width=9, height = 9)

setwd("..")
setwd("./plots/qc")

image(data.mouse[,1], col=rainbow(100, start=0, end=0.75)[100:1])
dev.copy2pdf(file="GSM701717_Mouse_E7_5_rep1.pdf", width= 9 , height=9)

image(data.mouse[,2], col=rainbow(100, start=0, end=0.75)[100:1])
dev.copy2pdf(file="GSM701717_Mouse_E7_5_rep2.pdf", width= 9 , height=9)

image(data.mouse[,3], col=rainbow(100, start=0, end=0.75)[100:1])
dev.copy2pdf(file="GSM701717_Mouse_E7_5_rep3.pdf", width= 9 , height=9)

image(data.mouse[,4], col=rainbow(100, start=0, end=0.75)[100:1])
dev.copy2pdf(file="GSM701717_Mouse_E8_5_rep1.pdf", width= 9 , height=9)

image(data.mouse[,5], col=rainbow(100, start=0, end=0.75)[100:1])
dev.copy2pdf(file="GSM701717_Mouse_E8_5_rep2.pdf", width= 9 , height=9)

image(data.mouse[,6], col=rainbow(100, start=0, end=0.75)[100:1])
dev.copy2pdf(file="GSM701717_Mouse_E8_5_rep3.pdf", width= 9 , height=9)

image(data.mouse[,7], col=rainbow(100, start=0, end=0.75)[100:1])
dev.copy2pdf(file="GSM701717_Mouse_E9_5_rep1.pdf", width= 9 , height=9)

image(data.mouse[,8], col=rainbow(100, start=0, end=0.75)[100:1])
dev.copy2pdf(file="GSM701717_Mouse_E9_5_rep2.pdf", width= 9 , height=9)

image(data.mouse[,9], col=rainbow(100, start=0, end=0.75)[100:1])
dev.copy2pdf(file="GSM701717_Mouse_E9_5_rep3.pdf", width= 9 , height=9)

image(data.mouse[,10], col=rainbow(100, start=0, end=0.75)[100:1])
dev.copy2pdf(file="GSM701717_Mouse_E10_5_rep1.pdf", width= 9 , height=9)

image(data.mouse[,11], col=rainbow(100, start=0, end=0.75)[100:1])
dev.copy2pdf(file="GSM701717_Mouse_E10_5_rep2.pdf", width= 9 , height=9)

image(data.mouse[,12], col=rainbow(100, start=0, end=0.75)[100:1])
dev.copy2pdf(file="GSM701717_Mouse_E10_5_rep3.pdf", width= 9 , height=9)

image(data.mouse[,13], col=rainbow(100, start=0, end=0.75)[100:1])
dev.copy2pdf(file="GSM701717_Mouse_E12_5_rep1.pdf", width= 9 , height=9) #looks suspicious

image(data.mouse[,14], col=rainbow(100, start=0, end=0.75)[100:1])
dev.copy2pdf(file="GSM701717_Mouse_E12_5_rep2.pdf", width= 9 , height=9)

image(data.mouse[,15], col=rainbow(100, start=0, end=0.75)[100:1])
dev.copy2pdf(file="GSM701717_Mouse_E14_5_rep1.pdf", width= 9 , height=9)

image(data.mouse[,16], col=rainbow(100, start=0, end=0.75)[100:1])
dev.copy2pdf(file="GSM701717_Mouse_E14_5_rep2.pdf", width= 9 , height=9)

image(data.mouse[,17], col=rainbow(100, start=0, end=0.75)[100:1])
dev.copy2pdf(file="GSM701717_Mouse_E16_5_rep1.pdf", width= 9 , height=9)

image(data.mouse[,18], col=rainbow(100, start=0, end=0.75)[100:1])
dev.copy2pdf(file="GSM701717_Mouse_E16_5_rep2.pdf", width= 9 , height=9)

image(data.mouse[,19], col=rainbow(100, start=0, end=0.75)[100:1])
dev.copy2pdf(file="GSM701717_Mouse_E18_5_rep1.pdf", width= 9 , height=9)

image(data.mouse[,20], col=rainbow(100, start=0, end=0.75)[100:1])
dev.copy2pdf(file="GSM701717_Mouse_E18_5_rep2.pdf", width= 9 , height=9)


colnames(data.mouse)


#create a vector with collection time and replicate number 

labels = c("E7.5_1", "E7.5_2", "E7.5_3",
           "E8.5_1", "E8.5_2", "E8.5_3",
           "E9.5_1", "E9.5_2", "E9.5_3",
           "E10.5_1", "E10.5_2", "E10.5_3",
           "E12.5_1", "E12.5_2",
           "E14.5_1", "E14.5_2",
           "E16.5_1", "E16.5_2",
           "E18.5_1", "E18.5_2")


#Normalization
#------------------

mouse.vsnrma <- vsnrma(data.mouse)

setwd("..")
setwd("..")
setwd("./sessions")
save.image(file="normalized_data_28389.rda")


#meanSdPlot
#----------------.
x11(width=9, height = 9)
meanSdPlot(mouse.vsnrma)

setwd("..")
setwd("./plots")
dev.copy2pdf(file="GSE28389_meanSdPlot_normalized.pdf")


#Boxplot
#-------------
# Before normalization:
x11(width=9, height = 9)
par(las=2)
mmi=c(1.5,1,1.04,0.9)
par(mai=mmi)
boxplot(data.mouse, col= rainbow(20), cex.axis=0.75,
        main="Gene expression in different stages of mouse embroyogenesis before vsnrma-normalization \nGSE28389 (Irie et al., 2011)")

dev.copy2pdf(file="GSE28389_BoxPlot_before_norm.pdf")

# After Normalization:
x11(width=9, height = 9)
par(las=2)
mmi=c(1.5,1,1.1,0.9)
par(mai=mmi)
boxplot(exprs(mouse.vsnrma), col= rainbow(20), cex.axis=0.75,
        main="Gene expression in different stages of mouse embroyogenesis after vsnrma-normalization \nGSE28389 (Irie et al., 2011)")

dev.copy2pdf(file="GSE28389_BoxPlot_normalizeddata.pdf")
#dev.off()


#RNA Degradation Plot
#-----------------------------
rnadeg.raw = AffyRNAdeg(data.mouse)

x11(width=8, height = 8)
plotAffyRNAdeg(rnadeg.raw, col=rainbow(20))
title(sub="mouse embroyogenesis data before vsnrma normalization")

dev.copy2pdf(file="GSE28389_RNAdegrad_RawData_shifted_scaled.pdf")

x11(width=8, height = 8)
plotAffyRNAdeg(rnadeg.raw, col=rainbow(20), transform= "shift.only")
title(sub="mouse embroyogenesis data before vsnrma normalization, shifted")

dev.copy2pdf(file="GSE28389_RNAdegrad_RawData_Shifted_only.pdf")

#Scatter Plot
#-------------------

for(i in 1:19){
  
  plot(exprs(mouse.vsnrma)[,c(i,i+1)],pch=".")
  abline(0,1,col="red")
  
  title(main=paste("Scatterplot of probe '", colnames(mouse.vsnrma)[i],"' and '", 
                   colnames(mouse.vsnrma)[i+1],"'",sep = " ", collapse= NULL))
  
  permission =readline(prompt = "type y for next image: ")
  
  if(permission=="y"){
  }
  else{
    break
  }
  
  file.name= paste("GSE28389_scatterplot_probe",as.character(i),"_and_probe", as.character(i+1),".pdf")
  dev.copy2pdf(file= file.name, width=9, height=9)
  dev.off()
}



#############################################
#Exploratory Data Analysis
#############################################

#load our main data frame

setwd("./raw_data")
tra_data = read.csv("TRA_data.csv") #load list of TRAs in our data set
eset = read.csv("eset.csv")


setwd("./raw_data")
eset=exprs(mouse.vsnrma)
eset=eset[65:53573,]

anno=read_table(file="mart_export1.txt")


tra_table = read_table(file="tra.2014.mouse.4301.5x.table.tsv")
tra_table = unique(tra_table)


##Remove NAs from the table     ???

#Replace blanks with NAs:
tra_table[tra_table == "\"\""] <- NA                    
write.csv(tra_table, file = "tra_table.csv")

tra_anno = merge(anno, tra_table, by.x = "Transcript.stable.ID",by.y = '"ensembl.transcript"', all = FALSE)
write.csv(tra_anno, file = "tra_anno.csv")

anno_data = merge(eset, anno, by.x = "row.names", by.y = "AFFY.Mouse430.2.probe", all = FALSE)
anno_data = anno_data[!duplicated(anno_data$Gene.stable.ID),]
write.csv(anno_data, file = "anno_data.csv")

#Remove "" from TRA table
tra_table = tra_table %>% 
  mutate(across(
    everything(),
    ~ map_chr(.x, ~ gsub("\"", "", .x))
  ))

tra_table = as.data.frame(tra_table)

tra_data = merge(anno_data, tra_table, by.x = "Transcript.stable.ID", by.y ='"ensembl.transcript"', all = FALSE)
tra_data = tra_data[, colSums(is.na(tra_data))<nrow(tra_data)] #delete empty columns
rownames(tra_data)= tra_data[,1]
write.csv(tra_data, file = "TRA_data.csv")

#Barplot of frequency of TRAs in our data frame

setwd("..")
setwd("./plots")

ggplot(data = tra_data) +
  geom_bar(mapping = aes(x = max.tissue, fill = max.tissue), show.legend = FALSE) +
  coord_flip() +
  ggtitle("5906 TRAs in GSE28389") +
  theme(plot.title = element_text(hjust = 0.5))

ggsave("barplot_tras_in_the_dataset.jpg", width = 12, height = 10)


#Differential expression  ???

#GSM701716 	[E-MTAB-368] Mouse developmental stage E7.5 1
#GSM701717 	[E-MTAB-368] Mouse developmental stage E7.5 2
#GSM701718 	[E-MTAB-368] Mouse developmental stage E7.5 3
#GSM701719 	[E-MTAB-368] Mouse developmental stage E8.5 1
#GSM701720 	[E-MTAB-368] Mouse developmental stage E8.5 2
#GSM701721 	[E-MTAB-368] Mouse developmental stage E8.5 3
#GSM701722 	[E-MTAB-368] Mouse developmental stage E9.5 1
#GSM701723 	[E-MTAB-368] Mouse developmental stage E9.5 2
#GSM701724 	[E-MTAB-368] Mouse developmental stage E9.5 3
#GSM701725 	[E-MTAB-368] Mouse developmental stage E10.5 1
#GSM701726 	[E-MTAB-368] Mouse developmental stage E10.5 2
#GSM701727 	[E-MTAB-368] Mouse developmental stage E10.5 3
#GSM701728 	[E-MTAB-368] Mouse developmental stage E12.5 1
#GSM701729 	[E-MTAB-368] Mouse developmental stage E12.5 2
#GSM701730 	[E-MTAB-368] Mouse developmental stage E14.5 1
#GSM701731 	[E-MTAB-368] Mouse developmental stage E14.5 2
#GSM701732 	[E-MTAB-368] Mouse developmental stage E16.5 1
#GSM701733 	[E-MTAB-368] Mouse developmental stage E16.5 2
#GSM701734 	[E-MTAB-368] Mouse developmental stage E18.5 1
#GSM701735 	[E-MTAB-368] Mouse developmental stage E18.5 2


#day7-8 ???

D78 = cbind(tra_data[,3]-tra_data[,6],
            tra_data[,4]-tra_data[,7],
            tra_data[,5]-tra_data[,8])

colnames(D78)=paste(rep("7.5 vs 8.5",3), as.character(1:3), sep=".")
rownames(D78)=rownames(tra_data)
tra_data1=tra_data[,2:38]

#limma

design = as.matrix(rep(1,3))
colnames(design)= "7.5 - 8.5"

#calculate fit and p-value

fit1 = lmFit(D78,design)
fit1=eBayes(fit1)

pvalue01 = sum(p.adjust(fit1$p.value, "BH")<0.01)
pvalue01 #1637

pvalue05 = sum(p.adjust(fit1$p.value, "BH")<0.05)
pvalue05 #2124

pvalue1 = sum(p.adjust(fit1$p.value, "BH")<0.1)
pvalue1 #2414

pvalue2 = sum(p.adjust(fit$p.value, "BH")<0.2)
pvalue2 #2813

pvalue3 = sum(p.adjust(fit1$p.value, "BH")<0.3)
pvalue3 #3217

pvalue5 = sum(p.adjust(fit1$p.value, "BH")<0.5)
pvalue5 #3939

DEG_7.5_8.5 = topTable(fit1, number = pvalue05, lfc = 1, p.value=0.05, sort.by = "logFC")
#189 transcripts differentially expressed

setwd("./tables")
write.csv(DEG_7.5_8.5, file = "differentially_expressed_genes_7.5_vs_8.5")

#annotating 

anno_info = tra_data1[,22:37] #!!!! add gene_symbols ???
deg1 = merge(DEG_7.5_8.5, anno_info, by = 0, all = FALSE)

#heatmap ???


#rownames_7.5_8.5 = which(rownames(DEG_7.5_8.5) %in% rownames(tra_data1) == T)
#genes_7.5_8.5 = tra_data1[rownames_7.5_8.5, 2:7]

x11(width = 5, height = 10)
heatmap(D78, cexRow = 1, cexCol = 0.8, main = "DEG 7.5-8.5") #???







#############################################
#PCA for TRA
#############################################

library("limma")
library("Biobase")
library("tidyverse")

tra_data

tra_data2.pca <- prcomp(t(tra_data [,3:22]), center = TRUE, scale = TRUE) #scale true sets the standard deviations of all variables to be equal to 1, so all variables can have an equal effect on the ordination.

#Set the labels
Days=c("7.5", "7.5", "7.5", "8.5", "8.5", "8.5", "9.5", "9.5", "9.5", "10.5", "10.5", "10.5", "12.5", "12.5", "14.5", "14.5", "16.5", "16.5", "18.5", "18.5")
Days = factor(Days, 
              levels = c("7.5", "8.5", "9.5", "10.5", "12.5", "14.5", "16.5", "18.5"))


# Inspect new PCA object and its variation accounting
tra_data2.pca.varprop <- tra_data2.pca %>% summary() %>% pluck("importance")
tra_data2.pca.varprop[c(1,2), ]

# Plot the PCA
pca_tra.fig <- ggplot(tra_data2.pca$x %>% as.data.frame()) + 
  geom_point(aes(x = PC1, y = PC2)) +
  ggtitle("tra PCA") +
  aes(color = Days, legend = FALSE)

pca_tra.fig

dev.copy2pdf(file="tra_PCA.pdf")


#PC2 v PC3
pca_tra_2v3.fig <- ggplot(tra_data2.pca$x %>% as.data.frame()) + 
  geom_point(aes(x = PC2, y = PC3)) +
  ggtitle("tra PC2 vs. PC3 PCA") +
  aes(color = Days, legend = FALSE)

pca_tra_2v3.fig

dev.copy2pdf(file="tra_PCA_2v3.pdf")


#PC3 v PC4
pca_tra_3v4.fig <- ggplot(tra_data2.pca$x %>% as.data.frame()) + 
  geom_point(aes(x = PC3, y = PC4)) +
  ggtitle("tra PC3 vs. PC4 PCA") +
  aes(color = Days, legend = FALSE)

pca_tra_3v4.fig

dev.copy2pdf(file="tra_PCA_3v4.pdf")


#PC4 v PC5
pca_tra_4v5.fig <- ggplot(tra_data2.pca$x %>% as.data.frame()) + 
  geom_point(aes(x = PC4, y = PC5)) +
  ggtitle("tra PC4 vs. PC5 PCA") +
  aes(color = Days, legend = FALSE)

pca_tra_4v5.fig

dev.copy2pdf(file="tra_PCA_4v5.pdf")


#PC5 v PC6
pca_tra_5v6.fig <- ggplot(tra_data2.pca$x %>% as.data.frame()) + 
  geom_point(aes(x = PC5, y = PC6)) +
  ggtitle("tra PC5 vs. PC6 PCA") +
  aes(color = Days, legend = FALSE)

pca_tra_5v6.fig

dev.copy2pdf(file="tra_PCA_5v6.pdf")


#PC6 v PC7
pca_tra_6v7.fig <- ggplot(tra_data2.pca$x %>% as.data.frame()) + 
  geom_point(aes(x = PC6, y = PC7)) +
  ggtitle("tra PC6 vs. PC7 PCA") +
  aes(color = Days, legend = FALSE)

pca_tra_6v7.fig

dev.copy2pdf(file="tra_PCA_6v7.pdf")


#PC7 v PC8
pca_tra_7v8.fig <- ggplot(tra_data2.pca$x %>% as.data.frame()) + 
  geom_point(aes(x = PC7, y = PC8)) +
  ggtitle("tra PC7 vs. PC8 PCA") +
  aes(color = Days, legend = FALSE)

pca_tra_7v8.fig

dev.copy2pdf(file="tra_PCA_7v8.pdf")


#PC8 v PC9
pca_tra_8v9.fig <- ggplot(tra_data2.pca$x %>% as.data.frame()) + 
  geom_point(aes(x = PC8, y = PC9)) +
  ggtitle("tra PC8 vs. PC9 PCA") +
  aes(color = Days, legend = FALSE)

pca_tra_8v9.fig

dev.copy2pdf(file="tra_PCA_8v9.pdf")


#PC9 v PC10
pca_tra_9v10.fig <- ggplot(tra_data2.pca$x %>% as.data.frame()) + 
  geom_point(aes(x = PC9, y = PC10)) +
  ggtitle("tra PC9 vs. PC10 PCA") +
  aes(color = Days, legend = FALSE)

pca_tra_9v10.fig

dev.copy2pdf(file="tra_PCA_9v10.pdf")

#PC10 v PC11
pca_tra_10v11.fig <- ggplot(tra_data2.pca$x %>% as.data.frame()) + 
  geom_point(aes(x = PC10, y = PC11)) +
  ggtitle("tra PC10 vs. PC11 PCA") +
  aes(color = Days, legend = FALSE)

pca_tra_10v11.fig

dev.copy2pdf(file="tra_PCA_10v11.pdf")

#PC11 v PC12
pca_tra_11v12.fig <- ggplot(tra_data2.pca$x %>% as.data.frame()) + 
  geom_point(aes(x = PC11, y = PC12)) +
  ggtitle("tra PC11 vs. PC12 PCA") +
  aes(color = Days, legend = FALSE)

pca_tra_11v12.fig

dev.copy2pdf(file="tra_PCA_11v12.pdf")

#PC12 v PC13
pca_tra_12v13.fig <- ggplot(tra_data2.pca$x %>% as.data.frame()) + 
  geom_point(aes(x = PC12, y = PC13)) +
  ggtitle("tra PC12 vs. PC13 PCA") +
  aes(color = Days, legend = FALSE)

pca_tra_12v13.fig

dev.copy2pdf(file="tra_PCA_12v13.pdf")

autoplot(tra_data2.pca, label = TRUE, label.size = 2.5, ylim = c(-0.4, 0.4), xlim = c(-0.4, 0.5))+
  aes(color = Days, legend = FALSE)
dev.copy2pdf(file="tra_PCA_with_labels.pdf")


plot1=autoplot(tra_data2.pca, label = TRUE, label.size = 3)
plot1

summary(eset2.pca)

biplot(eset2.pca$PC1, eset2.pca$PC2, scale = 0)

#‘arm-bend’ represents a decrease in cumulative contribution -looks like we need 3 or 4 ???
plot(eset2.pca, main="Arm bend PCA", type="lines")
dev.copy2pdf(file="Arm_bend_PCA_tra.pdf")


autoplot(eset2.pca$PC2, eset2.pca$PC3, label = TRUE)

autoplot(prcomp(tra_data[,3:22]), data = tra_data, colour = 'red', loadings = TRUE)

#-------------------------------------------------------------------------------
#calculate principal components
results <- prcomp(tra_data [,3:22], scale = TRUE)

#reverse the signs
results$rotation <- -1*results$rotation

#display principal components
results$rotation

#reverse the signs of the scores
results$x <- -1*results$x

#display the first six scores
head(results$x)

#Visualize the Results with a Biplot
biplot(results, scale = 0)

autoplot(results, label = TRUE, label.size = 3,
         loadings = TRUE, loadings.label = TRUE, loadings.label.size  = 3)



#############################################
#PCA for Chemokines
#############################################


library("limma")
library("Biobase")
library("tidyverse")
library("EMCluster")
library("BAMMtools")

chem_data

chem_data2.pca <- prcomp(t(chem_data [,2:21]), center = TRUE, scale = TRUE)
chem_data2.pca_unlist = unlist(chem_data2.pca)

# Inspect new PCA object and its variation accounting
chem_data2.pca.varprop <- chem_data2.pca %>% summary() %>% pluck("importance")
chem_data2.pca.varprop[c(1,2), ]

# Plot the PCAs agains each other until PC13 which includes 95% of the variance

#PC1 v PC2
pca_chem.fig <- ggplot(chem_data2.pca$x %>% as.data.frame()) + 
  geom_point(aes(x = PC1, y = PC2)) +
  ggtitle("Chemokine PCA") +
  aes(color = Days, legend = FALSE)

pca_chem.fig

dev.copy2pdf(file="Chem_PCA.pdf")


#PC2 v PC3
pca_chem_2v3.fig <- ggplot(chem_data2.pca$x %>% as.data.frame()) + 
  geom_point(aes(x = PC2, y = PC3)) +
  ggtitle("Chemokine PC2 vs. PC3 PCA") +
  aes(color = Days, legend = FALSE)

pca_chem_2v3.fig

dev.copy2pdf(file="Chem_PCA_2v3.pdf")


#PC3 v PC4
pca_chem_3v4.fig <- ggplot(chem_data2.pca$x %>% as.data.frame()) + 
  geom_point(aes(x = PC3, y = PC4)) +
  ggtitle("Chemokine PC3 vs. PC4 PCA") +
  aes(color = Days, legend = FALSE)

pca_chem_3v4.fig

dev.copy2pdf(file="Chem_PCA_3v4.pdf")


#PC4 v PC5
pca_chem_4v5.fig <- ggplot(chem_data2.pca$x %>% as.data.frame()) + 
  geom_point(aes(x = PC4, y = PC5)) +
  ggtitle("Chemokine PC4 vs. PC5 PCA") +
  aes(color = Days, legend = FALSE)

pca_chem_4v5.fig

dev.copy2pdf(file="Chem_PCA_4v5.pdf")


#PC5 v PC6
pca_chem_5v6.fig <- ggplot(chem_data2.pca$x %>% as.data.frame()) + 
  geom_point(aes(x = PC5, y = PC6)) +
  ggtitle("Chemokine PC5 vs. PC6 PCA") +
  aes(color = Days, legend = FALSE)

pca_chem_5v6.fig

dev.copy2pdf(file="Chem_PCA_5v6.pdf")


#PC6 v PC7
pca_chem_6v7.fig <- ggplot(chem_data2.pca$x %>% as.data.frame()) + 
  geom_point(aes(x = PC6, y = PC7)) +
  ggtitle("Chemokine PC6 vs. PC7 PCA") +
  aes(color = Days, legend = FALSE)

pca_chem_6v7.fig

dev.copy2pdf(file="Chem_PCA_6v7.pdf")


#PC7 v PC8
pca_chem_7v8.fig <- ggplot(chem_data2.pca$x %>% as.data.frame()) + 
  geom_point(aes(x = PC7, y = PC8)) +
  ggtitle("Chemokine PC7 vs. PC8 PCA") +
  aes(color = Days, legend = FALSE)

pca_chem_7v8.fig

dev.copy2pdf(file="Chem_PCA_7v8.pdf")


#PC8 v PC9
pca_chem_8v9.fig <- ggplot(chem_data2.pca$x %>% as.data.frame()) + 
  geom_point(aes(x = PC8, y = PC9)) +
  ggtitle("Chemokine PC8 vs. PC9 PCA") +
  aes(color = Days, legend = FALSE)

pca_chem_8v9.fig

dev.copy2pdf(file="Chem_PCA_8v9.pdf")


#PC9 v PC10
pca_chem_9v10.fig <- ggplot(chem_data2.pca$x %>% as.data.frame()) + 
  geom_point(aes(x = PC9, y = PC10)) +
  ggtitle("Chemokine PC9 vs. PC10 PCA") +
  aes(color = Days, legend = FALSE)

pca_chem_9v10.fig

dev.copy2pdf(file="Chem_PCA_9v10.pdf")

#PC10 v PC11
pca_chem_10v11.fig <- ggplot(chem_data2.pca$x %>% as.data.frame()) + 
  geom_point(aes(x = PC10, y = PC11)) +
  ggtitle("Chemokine PC10 vs. PC11 PCA") +
  aes(color = Days, legend = FALSE)

pca_chem_10v11.fig

dev.copy2pdf(file="Chem_PCA_10v11.pdf")

#PC11 v PC12
pca_chem_11v12.fig <- ggplot(chem_data2.pca$x %>% as.data.frame()) + 
  geom_point(aes(x = PC11, y = PC12)) +
  ggtitle("Chemokine PC11 vs. PC12 PCA") +
  aes(color = Days, legend = FALSE)

pca_chem_11v12.fig

dev.copy2pdf(file="Chem_PCA_11v12.pdf")

#PC12 v PC13
pca_chem_12v13.fig <- ggplot(chem_data2.pca$x %>% as.data.frame()) + 
  geom_point(aes(x = PC12, y = PC13)) +
  ggtitle("Chemokine PC12 vs. PC13 PCA") +
  aes(color = Days, legend = FALSE)

pca_chem_12v13.fig

dev.copy2pdf(file="Chem_PCA_12v13.pdf")






#############################################
#t-SNE
#############################################

##t-SNE for TRAs

library(devtools)
library(factoextra) #for visualization of PCA results
library(Rtsne)
library(tibble) #to convert rownames to column

#Explore the PCA results
get_eig(tra_data2.pca)

results_of_variables_tra = get_pca_var(tra_data2.pca)

# Coordinates of variables
coordinates_tra = results_of_variables_tra$coord
coordinates_tra

# Cos2 of variables
results_of_variables_tra$cos2

# Contribution of variables
results_of_variables_tra$contrib





PCA_matrix_not_transposed = tra_data2.pca[["x"]]

#Only do t-SNE on the first 14 PCs to cover 95%
PCA_matrix_not_transposed = PCA_matrix_not_transposed[ ,1:14]


#With not transposed matirces 
tsne_results_matrix_2 = Rtsne(PCA_matrix_not_transposed, perplexity=2, check_duplicates = FALSE)
tsne_results_matrix_3 = Rtsne(PCA_matrix_not_transposed, perplexity=3, check_duplicates = FALSE)
tsne_results_matrix_4 = Rtsne(PCA_matrix_not_transposed, perplexity=4, check_duplicates = FALSE)



#Plot the results ??? should this stay?
plot(tsne_results_matrix_2$Y, col = "blue", pch = 1, cex = 1.5, main ="t-SNE with perplexity 2", xlab = "t-SNE 1", ylab = "t-SNE 2", xlim = c(-200, 400))
text(tsne_results_matrix_2$Y, labels, cex=0.6, pos=4, col="red")

plot(tsne_results_matrix_3$Y, col = "blue", pch = 1, cex = 1.5, main ="t-SNE with perplexity 3", xlab = "t-SNE 1", ylab = "t-SNE 2", xlim = c(-200, 400))
text(tsne_results_matrix_3$Y, labels, cex=0.6, pos=4, col="red")

plot(tsne_results_matrix_4$Y, col = "blue", pch = 1, cex = 1.5, main ="t-SNE with perplexity 4", xlab = "t-SNE 1", ylab = "t-SNE 2", xlim = c(-200, 400))
text(tsne_results_matrix_4$Y, labels, cex=0.6, pos=4, col="red")



##Plot and Cluster
library(mclust)
library(cluster)
library(ggplot2)
library(dplyr)
library(magrittr)
library(ggrepel)
library(factoextra)
library(Cluster)
library(factoextra)

labels = c("E7.5_1", "E7.5_2", "E7.5_3",
           "E8.5_1", "E8.5_2", "E8.5_3",
           "E9.5_1", "E9.5_2", "E9.5_3",
           "E10.5_1", "E10.5_2", "E10.5_3",
           "E12.5_1", "E12.5_2",
           "E14.5_1", "E14.5_2",
           "E16.5_1", "E16.5_2",
           "E18.5_1", "E18.5_2")

#Perplexity 2
#Give the data a new name
df <- tsne_results_matrix_2$Y
df = data.frame(df)
rownames(df) = labels

#find out optimal count of clusters
fviz_nbclust(df, FUNcluster = kmeans, method = "wss")

#Reproducability
set.seed(1)

#Durchführen von k-Means Clustering mit k = 4 Clustern
km <- kmeans(df, centers = 4, nstart = 25)

#Plot it
fviz_cluster(km, data = df, axes = c(-4, 4), main = "t-SNE with perplexity 2, k-means clustering",
             xlab = "t-SNE 1", ylab = "t-SNE 2", xlim = c(-2, 2), ylim = c(-2,2))
dev.copy2pdf(file="t-SNE_perplexity_2_kmeans.pdf")


#Same for perplexity 3
df3 <- tsne_results_matrix_3$Y
df3 = data.frame(df3)
rownames(df3) = labels
fviz_nbclust(df3, FUNcluster = kmeans, method = "wss")
km3 <- kmeans(df3, centers = 2, nstart = 25)
fviz_cluster(km3, data = df3, axes = c(-4, 4), main = "t-SNE with perplexity 3, k-means clustering",
             xlab = "t-SNE 1", ylab = "t-SNE 2", xlim = c(-2, 2), ylim = c(-2,2))
dev.copy2pdf(file="t-SNE_perplexity_3_kmeans.pdf")


#Same for perplexity 4
df4 <- tsne_results_matrix_4$Y
df4 = data.frame(df4)
rownames(df4) = labels
fviz_nbclust(df4, FUNcluster = kmeans, method = "wss")
km4 <- kmeans(df4, centers = 3, nstart = 25)
fviz_cluster(km4, data = df4, axes = c(-4, 4), main = "t-SNE with perplexity 4, k-means clustering",
             xlab = "t-SNE 1", ylab = "t-SNE 2", xlim = c(-2, 2), ylim = c(-2,2))
dev.copy2pdf(file="t-SNE_perplexity_4_kmeans.pdf")



#############################################
#UMAP
#############################################
library(umap)

set.seed(123456)
umap_tra = umap(tra_SNE_data)
plot(umap_tra$layout, pch = ".") 

umap_results_matrix_nneighbor_15 = umap(PCA_matrix_not_transposed, n_neighbors=15)
umap_results_matrix_nneighbor_20 = umap(PCA_matrix_not_transposed, n_neighbors=20)
umap_results_matrix_nneighbor_5 = umap(PCA_matrix_not_transposed, n_neighbors=5)


df15 <- umap_results_matrix_nneighbor_15$layout
df15 = data.frame(df15)
rownames(df15) = labels
fviz_nbclust(df15, FUNcluster = kmeans, method = "wss")
km15 <- kmeans(df15, centers = 3, nstart = 25)
fviz_cluster(km15, data = df15, axes = c(-4, 4), main = "UMAP, nearest neighbors = 15, k-means clustering",
             xlab = "UMAP 1", ylab = "UMAP 2", xlim = c(-2, 2), ylim = c(-2,2))
dev.copy2pdf(file="UMAP_nneighobs_15_kmeans.pdf")


df20 <- umap_results_matrix_nneighbor_20$layout
df20 = data.frame(df20)
rownames(df20) = labels
fviz_nbclust(df20, FUNcluster = kmeans, method = "wss")
km20 <- kmeans(df20, centers = 3, nstart = 25)
fviz_cluster(km20, data = df20, axes = c(-4, 4), main = "UMAP, nearest neighbors = 20, k-means clustering",
             xlab = "UMAP 1", ylab = "UMAP 2", xlim = c(-2, 2), ylim = c(-2,2))
dev.copy2pdf(file="UMAP_nneighobs_20_kmeans.pdf")


df5 <- umap_results_matrix_nneighbor_5$layout
df5 = data.frame(df5)
rownames(df5) = labels
fviz_nbclust(df5, FUNcluster = kmeans, method = "wss")
km5 <- kmeans(df5, centers = 2, nstart = 25)
fviz_cluster(km5, data = df5, axes = c(-4, 4), main = "UMAP, nearest neighbors = 5, k-means clustering",
             xlab = "UMAP 1", ylab = "UMAP 2", xlim = c(-2, 2), ylim = c(-2,2))
dev.copy2pdf(file="UMAP_nneighobs_5_kmeans.pdf")


#############################################
#k-means clustering
#############################################


#Load Annotated DGE Files in Environment
setwd("./rawdata")
setwd("./deg")
anno_7.5_8.5 = read.csv("anno_7.5_8.5.csv")
anno_8.5_9.5 = read.csv("anno_8.5_9.5.csv")
anno_9.5_10.5.csv = read.csv("anno_9.5_10.5.csv")
anno_10.5_12.5.csv = read.csv("anno_10.5_12.5.csv")
anno_12.5_14.5.csv = read.csv("anno_12.5_14.5.csv")
anno_14.5_16.5.csv = read.csv("anno_14.5_16.5.csv")
anno_16.5_18.5.csv = read.csv("anno_16.5_18.5.csv")

#K MEANS CLUSTERING MIT K=4 UND DER WEG DAHIN
#Versuch2
k.max <- 15
data <- anno_7.5_8.5_scaled
wss <- sapply(1:k.max, 
              function(k){kmeans(data, k, nstart=50,iter.max = 15 )$tot.withinss})
wss
plot(1:k.max, wss,
     type="b", pch = 20, frame = FALSE, 
     xlab="Number of clusters K",
     ylab="Total within-clusters sum of squares",
     main="Optimal Number of Clusters")
dev.copy2pdf(file="anno_7.5_8.5_Elbow_method.pdf",width=15, height=8)



#Compute k-means with k=4 for logfc and average expression
km.res <- kmeans(anno_7.5_8.5[,3:4], 4, nstart = 25)

#print the results gives a list
print(km.res)

#visualize the kmeans 
fviz_cluster(km.res, data = anno_7.5_8.5[,3:4])
dev.copy2pdf(file="anno_7.5_8.5_cluster_plot.pdf",width=15, height=15)

#-------------------------------------------
#get the X out of the chromosomes
chrom_vec = anno_7.5_8.5$X.chrom.
chrom_vec_nox = replace(chrom_vec,            # Replace values
                        chrom_vec == "X",
                        20)


#kmeans via step by step guide -> needs to be done
df = anno_7.5_8.5

# Compute k-means with k = 4 and select colums of interest
set.seed(123)
res.km_df <- kmeans(scale(df[, c(3,4,21,23)]), 4, nstart = 25)
# K-means clusters showing the group of each individuals
res.km$cluster







#k-means clustering
#------------------


set.seed(123)
km.res <- kmeans(anno_7.5_8.5[, 3:4], centers = 4, nstart = 25)
print(km.res)

aggregate(anno_7.5_8.5[,3:4], by = list(cluster=km.res$cluster), mean) #shows means of each vaiables by 
kmeans_7.5_8.5 = cbind(anno_7.5_8.5, cluster = km.res$cluster)

top_7.5_8.5 = anno_7.5_8.5[order(abs(anno_7.5_8.5$logFC), decreasing = TRUE),]
top100_7.5_8.5 = top_7.5_8.5[1:100,]





#vizualisation of k-means clustering

fviz_cluster(km.res, data = anno_7.5_8.5[,3:4],
             geom = "point",
             ellipse = TRUE,
             ellipse.type = "convex",
             main = "Cluster plot for day 7.5 to 8.5",
)
dd = anno_7.5_8.5[, c(3,4,21,23)]
dd$X.chrom.[dd$X.chrom.=="X"] <- 20

res.pca = prcomp(dd, scale = TRUE)



#defining otimal number of clusters

set.seed(123)
fviz_nbclust(anno_7.5_8.5[,3:4], kmeans, method = "wss") +
  geom_vline(xintercept = 3, linetype =2)+
  labs(subtitle = "Elbow method")
ggsave("")

set.seed(123)
fviz_nbclust(anno_7.5_8.5[,3:4], kmeans, nstart = 25, method = "gap_stat", nboot = 50) +
  labs(subtitle = "Gap statistic method")


set.seed(123)
fviz_nbclust(anno_7.5_8.5[,3:4], kmeans, method = "silhouette")+
  labs(subtitle = "Silhouette method")


ggscatter(kmeans_7.5_8.5,
          x = "logFC", 
          y = "AveExpr",
          color = "X.max.tissue.",
          title = "K-means clustering of differentially expressed genes between day 7.5 and 8.5",
          xlab = "Log fold change",
          ylab = "Average expression"
)
ggsave("ggg.jpg", width = 20, height = 20)



ggscatter(top100_7.5_8.5,
          x = "logFC", 
          y = "AveExpr",
          color = "X.max.tissue.",
          size = 10,
          title = "K-means clustering of differentially expressed genes between day 7.5 and 8.5",
          xlab = "Log fold change",
          ylab = "Average expression"
)
ggsave("ggg.jpg", width = 20, height = 20)


EnhancedVolcano(anno_7.5_8.5[,c(3,4,5,6,7,8,14)],
                lab = anno_7.5_8.5$Gene.name,
                x = "log2FoldChange",
                y = "pvalue",
                title = "7.5 vs 8.5",
                FCcutoff = 1,
                pointSize = 3,
)






#############################################
#volcano plot
#############################################

names=as.character(anno_7.5_8.5$Gene.name)
volcanoplot(fit2, 1, "p-value", 50, names=names, hl.col= "orange", xlab="Log2 Fold Change", ylab=NULL, pch=16, cex=0.35)

dev.copy2pdf(file="volcano_plot",width=15, height=15)

#fit2[["genes"]][["Row.names"]] to get the names from the fit2 list



#Some other dude's guide

data = cbind(anno_7.5_8.5$Gene.name, de)
data
colnames(data)=c("Gene.name", "logFC", "P.Value")

#Volcano plots are basically scatter plots. I will use the adjusted pvalue (was it adjusted with the false discovery rate?)
p1 = ggplot(data, aes(logFC, -log(P.Value,10))) + # -log10 conversion  
  geom_point(size = 2/5) +
  xlab(expression("log"[2]*"FC")) + 
  ylab(expression("-log"[10]*"P.Value"))
p1

ggsave("barplot_tras_in_the_dataset.jpg", width = 12, height = 10)

#How it would look like without the -log10
p1.5 = ggplot(data, aes(logFC, P.Value)) +   
  geom_point(size = 2/5) +
  xlab(expression("log"[2]*"FC")) + 
  ylab(expression("P.Value"))
p1.5



#The higher the position of a point, the more significant its value is (y axis). 
#Points with positive fold change values (to the right) are up-regulated and 
#points with negative fold change values (to the left) are down-regulated (x axis)

#Adding colour to DEGs
#DEGs are those with a logFC greater or equal to 2 and pvalue of 0.05 or less, adding the expression
data <- data %>% 
  mutate(
    Expression = case_when(logFC >= log(2) &  P.Value<= 0.05 ~ "Up-regulated",
                           logFC <= -log(2) & P.Value <= 0.05 ~ "Down-regulated",
                           TRUE ~ "Unchanged")
  )
head(data) 

#Map the column Expression to the colour aesthetic 
p2 <- ggplot(data, aes(logFC, -log(P.Value,10))) +
  geom_point(aes(color = Expression), size = 2/5) +
  xlab(expression("log"[2]*"FC")) + 
  ylab(expression("-log"[10]*"P.Value")) +
  scale_color_manual(values = c("dodgerblue3", "gray50", "firebrick3")) +
  guides(colour = guide_legend(override.aes = list(size=1.5))) 
p2


#Find out how many genes are up or down regulated or unchanged
data %>% 
  count(Expression) %>% 
  knitr::kable()


#Colour genes according to their significance level
#First add another column with Significance, classify genes according to their significance thresholds
#Did I just add a threshold on top of the already existing threshold?
data <- data %>% 
  mutate(
    Significance = case_when(
      abs(logFC) >= log(2) & P.Value <= 0.05 & P.Value > 0.01 ~ "P.Value 0.05", 
      abs(logFC) >= log(2) & P.Value <= 0.01 & P.Value > 0.001 ~ "P.Value 0.01",
      abs(logFC) >= log(2) & P.Value <= 0.001 ~ "P.Value 0.001", 
      TRUE ~ "Unchanged")
  )
head(data) %>% 
  knitr::kable()


#Map colour of the points to their corresponding significance thresholds
p3 <- ggplot(data, aes(logFC, -log(P.Value,10))) +
  geom_point(aes(color = Significance), size = 2/5) +
  xlab(expression("log"[2]*"FC")) + 
  ylab(expression("-log"[10]*"P.Value")) +
  scale_color_viridis_d() +
  guides(colour = guide_legend(override.aes = list(size=1.5))) 

p3


#Counting how many genes are up- or down- regulated according to the different significance thresholds
data %>% 
  count(Expression, Significance) %>% 
  knitr::kable()


#Add labels to selected genes 
top <- 10
top_genes <- bind_rows(
  data %>% 
    filter(Expression == 'Up-regulated') %>% 
    arrange(P.Value, desc(abs(logFC))) %>% 
    head(top),
  data %>% 
    filter(Expression == 'Down-regulated') %>% 
    arrange(P.Value, desc(abs(logFC))) %>% 
    head(top)
)
top_genes %>% 
  knitr::kable()


p4 <-  p3 +
  geom_label_repel(data = top_genes,
                   mapping = aes(logFC, -log(P.Value,10), label = Gene.name),
                   size = 2)
p4

ggsave("barplot_tras_in_the_dataset_a.jpg", width = 12, height = 10)






#Now do the same thing without the condition that LogFC has to be greater than 2 fold

data.1 <- data %>% 
  mutate(
    Expression = case_when(logFC > 0 &  P.Value<= 0.05 ~ "Up-regulated",
                           logFC <= -0 & P.Value <= 0.05 ~ "Down-regulated",
                           TRUE ~ "Unchanged")
  )
head(data.1) 

#Map the column Expression to the colour aesthetic 
p2.1 <- ggplot(data.1, aes(logFC, -log(P.Value,10))) +
  geom_point(aes(color = Expression), size = 2/5) +
  xlab(expression("log"[2]*"FC")) + 
  ylab(expression("-log"[10]*"P.Value")) +
  scale_color_manual(values = c("dodgerblue3", "firebrick3")) +
  guides(colour = guide_legend(override.aes = list(size=1.5))) 
p2.1


#Find out how many genes are up or down regulated or unchanged
data.1 %>% 
  count(Expression) %>% 
  knitr::kable()


#Colour genes according to their significance level
#First add another column with Significance, classify genes according to their significance thresholds
#Did I just add a threshold on top of the already existing threshold?
data.1 <- data.1 %>% 
  mutate(
    Significance = case_when(
      P.Value <= 0.05 & P.Value > 0.01 ~ "P.Value 0.05", 
      P.Value <= 0.01 & P.Value > 0.001 ~ "P.Value 0.01",
      P.Value <= 0.001 ~ "P.Value 0.001", 
      TRUE ~ "Unchanged")
  )
head(data.1) %>% 
  knitr::kable()


#Map colour of the points to their corresponding significance thresholds
p3.1 <- ggplot(data.1, aes(logFC, -log(P.Value,10))) +
  geom_point(aes(color = Significance), size = 2/5) +
  xlab(expression("log"[2]*"FC")) + 
  ylab(expression("-log"[10]*"P.Value")) +
  scale_color_viridis_d() +
  guides(colour = guide_legend(override.aes = list(size=1.5))) 

p3.1


#Counting how many genes are up- or down- regulated according to the different significance thresholds
data.1 %>% 
  count(Expression, Significance) %>% 
  knitr::kable()


#Add labels to selected genes 
top <- 10
top_genes.1 <- bind_rows(
  data.1 %>% 
    filter(Expression == 'Up-regulated') %>% 
    arrange(P.Value, desc(abs(logFC))) %>% 
    head(top),
  data %>% 
    filter(Expression == 'Down-regulated') %>% 
    arrange(P.Value, desc(abs(logFC))) %>% 
    head(top)
)
top_genes.1 %>% 
  knitr::kable()


p4.1 <-  p3.1 +
  geom_label_repel(data = top_genes.1,
                   mapping = aes(logFC, -log(P.Value,10), label = Gene.name),
                   size = 2)
p4.1

ggsave("barplot_tras_in_the_dataset_2.jpg", width = 12, height = 10)


#############################################
#limma for TRAs p=0.05
#############################################


tra_data_not_anno = tra_data[,2:22]
setwd("./plots")
tra_anno = read.csv("tra_anno.csv")

#setwd("./limma_TRA")

# all-in-one limma
#-----------------

design = model.matrix(~ 0+factor(c(1,1,1,2,2,2,3,3,3,4,4,4,5,5,6,6,7,7,8,8)))
colnames(design) = c("Day_7.5", "Day_8.5", "Day_9.5", "Day_10.5", "Day_12.5", "Day_14.5", "Day_16.5", "Day_18.5")
fit = lmFit(tra_data_not_anno, design) #Fit linear model for each gene given a series of arrays

# making pairwise comparisons

contrast.matrix = makeContrasts(Day_7.5-Day_8.5, Day_8.5-Day_9.5, Day_9.5-Day_10.5, Day_10.5-Day_12.5, Day_12.5-Day_14.5, Day_14.5-Day_16.5, Day_16.5-Day_18.5, levels = design)
fit2 = contrasts.fit(fit, contrast.matrix)
fit2 = eBayes(fit2)

#extracting a list of top exressed genes

topTable7.5_8.5 = topTable(fit2, coef = 1, adjust.method="BH", p.value = 0.05, number = 6631)
write.csv(topTable7.5_8.5, file = "topTable7.5_8.5.csv")
topTable8.5_9.5 = topTable(fit2, coef = 2, adjust.method="BH", p.value = 0.05, number = 6631)
write.csv(topTable8.5_9.5, file = "topTable8.5_9.5.csv")
topTable9.5_10.5 = topTable(fit2, coef = 3, adjust.method="BH", p.value = 0.05, number = 6631)
write.csv(topTable9.5_10.5, file = "topTable9.5_10.5.csv")
topTable10.5_12.5 = topTable(fit2, coef = 4, adjust.method="BH", p.value = 0.05, number = 6631)
write.csv(topTable10.5_12.5, file = "topTable10.5_12.5.csv")
topTable12.5_14.5 = topTable(fit2, coef = 5, adjust.method="BH", p.value = 0.05, number = 6631)
write.csv(topTable12.5_14.5, file = "topTable12.5_14.5.csv")
topTable14.5_16.5 = topTable(fit2, coef = 6, adjust.method="BH", p.value = 0.05, number = 6631)
write.csv(topTable14.5_16.5, file = "topTable14.5_16.5.csv")
topTable16.5_18.5 = topTable(fit2, coef = 7, adjust.method="BH", p.value = 0.05, number = 6631)
write.csv(topTable16.5_18.5, file = "topTable16.5_18.5.csv")


# annotating differentialy expressed genes

deg_list = list(topTable7.5_8.5, topTable8.5_9.5, topTable9.5_10.5, topTable9.5_10.5, topTable10.5_12.5, topTable12.5_14.5, topTable14.5_16.5, topTable16.5_18.5)
deg_list = lapply(deg_list, function(x) merge(x, tra_anno, by.x = "Row.names", by.y = "AFFY.Mouse430.2.probe", all = FALSE))

setwd("./deg")

#splitting of the list into dataframes

anno_7.5_8.5 = deg_list[[1]]
anno_7.5_8.5 = anno_7.5_8.5[!duplicated(anno_7.5_8.5$Row.names),]
write.csv(anno_7.5_8.5, file = "anno_7.5_8.5.csv")

anno_8.5_9.5 = deg_list[[2]]
anno_8.5_9.5 = anno_8.5_9.5[!duplicated(anno_8.5_9.5$Row.names),]
write.csv(anno_8.5_9.5, file = "anno_8.5_9.5.csv")

anno_9.5_10.5 = deg_list[[3]]
anno_9.5_10.5 = anno_9.5_10.5[!duplicated(anno_9.5_10.5$Row.names),]
write.csv(anno_9.5_10.5, file = "anno_9.5_10.5.csv")

anno_10.5_12.5 = deg_list[[4]]
anno_10.5_12.5 = anno_10.5_12.5[!duplicated(anno_10.5_12.5$Row.names),]
write.csv(anno_10.5_12.5, file = "anno_10.5_12.5.csv")

anno_12.5_14.5 = deg_list[[5]]
anno_12.5_14.5 = anno_12.5_14.5[!duplicated(anno_12.5_14.5$Row.names),]
write.csv(anno_12.5_14.5, file = "anno_12.5_14.5.csv")

anno_14.5_16.5 = deg_list[[6]]
anno_14.5_16.5 = anno_14.5_16.5[!duplicated(anno_14.5_16.5$Row.names),]
write.csv(anno_14.5_16.5, file = "anno_14.5_16.5.csv")

anno_16.5_18.5 = deg_list[[7]]
anno_16.5_18.5 = anno_16.5_18.5[!duplicated(anno_16.5_18.5$Row.names),]
write.csv(anno_16.5_18.5, file = "anno_16.5_18.5.csv")


#barplots 

setwd("./rawdata")
setwd("./deg")
anno_degs_filenames = list.files(pattern = "*.csv", full.names = TRUE)
anno_degs = lapply(anno_degs_filenames, read.csv)

degs_barplot_names = c("7.5 and 8.5", "8.5 and 9.5", "9.5 and 10.5", "10.5 and 12.5", "12.5 and 14.5", "14.5 and 16.5", "16.5 and 18.5")
save_degs_barplot_names = c("7.5_8.5", "8.5_9.5", "9.5_10.5", "10.5_12.5", "12.5_14.5", "14.5_16.5", "16.5_18.5")

for (i in 1:length(anno_degs)){
  ggplot(data = anno_degs[[i]]) +
    geom_bar(mapping = aes(x = X.max.tissue., fill = X.max.tissue.), show.legend = FALSE) +
    coord_flip() +
    ggtitle(paste("Differentially expressed genes between", degs_barplot_names[i], sep = " ", collapse= NULL))+
    theme(plot.title = element_text(hjust = 0.5))
  ggsave(paste("barplot_", save_degs_barplot_names[i], ".jpeg"), width = 12, height = 10)
}



#############################################
#limma for TRAs p=0.01
#############################################


topTable7.5_8.5_p001 = topTable(fit2, coef = 1, adjust.method="BH", p.value = 0.01, number = 6631)
write.csv(topTable7.5_8.5_p001, file = "topTable7.5_8.5_p001.csv")
topTable8.5_9.5_p001 = topTable(fit2, coef = 2, adjust.method="BH", p.value = 0.01, number = 6631)
write.csv(topTable8.5_9.5_p001, file = "topTable8.5_9.5_p001.csv")
topTable9.5_10.5_p001 = topTable(fit2, coef = 3, adjust.method="BH", p.value = 0.01, number = 6631)
write.csv(topTable9.5_10.5_p001, file = "topTable9.5_10.5_p001.csv")
topTable10.5_12.5_p001 = topTable(fit2, coef = 4, adjust.method="BH", p.value = 0.01, number = 6631)
write.csv(topTable10.5_12.5_p001, file = "topTable10.5_12.5_p001.csv")
topTable12.5_14.5_p001 = topTable(fit2, coef = 5, adjust.method="BH", p.value = 0.01, number = 6631)
write.csv(topTable12.5_14.5_p001, file = "topTable12.5_14.5_p001.csv")
topTable14.5_16.5_p001 = topTable(fit2, coef = 6, adjust.method="BH", p.value = 0.01, number = 6631)
write.csv(topTable14.5_16.5_p001, file = "topTable14.5_16.5_p001.csv")
topTable16.5_18.5_p001 = topTable(fit2, coef = 7, adjust.method="BH", p.value = 0.01, number = 6631)
write.csv(topTable16.5_18.5_p001, file = "topTable16.5_18.5_p001.csv")


# annotating differentialy expressed genes

deg_list_p001 = list(topTable7.5_8.5_p001, topTable8.5_9.5_p001, topTable9.5_10.5_p001, topTable9.5_10.5_p001, topTable10.5_12.5_p001, topTable12.5_14.5_p001, topTable14.5_16.5_p001, topTable16.5_18.5_p001)
deg_list_p001 = lapply(deg_list_p001, function(x) merge(x, tra_anno, by.x = "Row.names", by.y = "AFFY.Mouse430.2.probe", all = FALSE))

setwd("./deg")

#splitting of the list into dataframes

anno_7.5_8.5_p001 = deg_list_p001[[1]]
anno_7.5_8.5_p001 = anno_7.5_8.5_p001[!duplicated(anno_7.5_8.5_p001$Row.names),]
write.csv(anno_7.5_8.5_p001, file = "anno_7.5_8.5_p001.csv")

anno_8.5_9.5_p001 = deg_list_p001[[2]]
anno_8.5_9.5_p001 = anno_8.5_9.5_p001[!duplicated(anno_8.5_9.5_p001$Row.names),]
write.csv(anno_8.5_9.5_p001, file = "anno_8.5_9.5_p001.csv")

anno_9.5_10.5_p001 = deg_list_p001[[3]]
anno_9.5_10.5_p001 = anno_9.5_10.5_p001[!duplicated(anno_9.5_10.5_p001$Row.names),]
write.csv(anno_9.5_10.5_p001, file = "anno_9.5_10.5_p001.csv")

anno_10.5_12.5_p001 = deg_list_p001[[4]]
anno_10.5_12.5_p001 = anno_10.5_12.5_p001[!duplicated(anno_10.5_12.5_p001$Row.names),]
write.csv(anno_10.5_12.5_p001, file = "anno_10.5_12.5_p001.csv")

anno_12.5_14.5_p001 = deg_list_p001[[5]]
anno_12.5_14.5_p001 = anno_12.5_14.5_p001[!duplicated(anno_12.5_14.5_p001$Row.names),]
write.csv(anno_12.5_14.5_p001, file = "anno_12.5_14.5_p001.csv")

anno_14.5_16.5_p001 = deg_list_p001[[6]]
anno_14.5_16.5_p001 = anno_14.5_16.5_p001[!duplicated(anno_14.5_16.5_p001$Row.names),]
write.csv(anno_14.5_16.5_p001, file = "anno_14.5_16.5_p001.csv")

anno_16.5_18.5_p001 = deg_list_p001[[7]]
anno_16.5_18.5_p001 = anno_16.5_18.5_p001[!duplicated(anno_16.5_18.5_p001$Row.names),]
write.csv(anno_16.5_18.5_p001, file = "anno_16.5_18.5_p001.csv")



#############################################
#limma for Chemokines p=0.05
#############################################
save.image(file='Data_Project.RData')

load('Data_Project.RData')

#annotating chemokines

setwd("rawdata")
library(readr)
anno_chem = read_table("mart_export_chemokines.txt")

chemokines = grep("chemokine",anno_chem$Gene.description)
anno_chem = anno_chem[chemokines,]
anno_chem = as.data.frame(anno_chem)
write.csv(anno_chem, file = "anno_chem.csv")

anno_chem = read.csv(file = "anno_chem.csv")


#load our main data frame

setwd("./rawdata")
eset = read.csv("eset.csv")

#----------------------------------------
#Exploratory Data Analysis for Chemokines
#----------------------------------------



chem_data = merge(eset, anno_chem, by.x = "X", by.y = "AFFY.Mouse430.2.probe", all = FALSE)
chem_data = chem_data[!duplicated(chem_data$X),]
chem_data = chem_data[,1:21]
rownames(chem_data) = chem_data$X
chem_data = chem_data[, 2:21]
write.csv(chem_data, file = "chem_data.csv")

#> chem_data = read.csv("chem_data.csv", row.names = 1)



#Differential expression

#GSM701716 	[E-MTAB-368] Mouse developmental stage E7.5 1
#GSM701717 	[E-MTAB-368] Mouse developmental stage E7.5 2
#GSM701718 	[E-MTAB-368] Mouse developmental stage E7.5 3
#GSM701719 	[E-MTAB-368] Mouse developmental stage E8.5 1
#GSM701720 	[E-MTAB-368] Mouse developmental stage E8.5 2
#GSM701721 	[E-MTAB-368] Mouse developmental stage E8.5 3
#GSM701722 	[E-MTAB-368] Mouse developmental stage E9.5 1
#GSM701723 	[E-MTAB-368] Mouse developmental stage E9.5 2
#GSM701724 	[E-MTAB-368] Mouse developmental stage E9.5 3
#GSM701725 	[E-MTAB-368] Mouse developmental stage E10.5 1
#GSM701726 	[E-MTAB-368] Mouse developmental stage E10.5 2
#GSM701727 	[E-MTAB-368] Mouse developmental stage E10.5 3
#GSM701728 	[E-MTAB-368] Mouse developmental stage E12.5 1
#GSM701729 	[E-MTAB-368] Mouse developmental stage E12.5 2
#GSM701730 	[E-MTAB-368] Mouse developmental stage E14.5 1
#GSM701731 	[E-MTAB-368] Mouse developmental stage E14.5 2
#GSM701732 	[E-MTAB-368] Mouse developmental stage E16.5 1
#GSM701733 	[E-MTAB-368] Mouse developmental stage E16.5 2
#GSM701734 	[E-MTAB-368] Mouse developmental stage E18.5 1
#GSM701735 	[E-MTAB-368] Mouse developmental stage E18.5 2

chem_data_not_anno = chem_data#[,1:20] #von row.names bis zum letzten Chip.


# all-in-one limma
#-----------------

design = model.matrix(~ 0+factor(c(1,1,1,2,2,2,3,3,3,4,4,4,5,5,6,6,7,7,8,8)))
colnames(design) = c("Day_7.5", "Day_8.5", "Day_9.5", "Day_10.5", "Day_12.5", "Day_14.5", "Day_16.5", "Day_18.5")
fit = lmFit(chem_data_not_anno, design) #Fit linear model for each gene given a series of arrays

# making pairwise comparisons

contrast.matrix_chem = makeContrasts(Day_7.5-Day_8.5, Day_8.5-Day_9.5, Day_9.5-Day_10.5, Day_10.5-Day_12.5, Day_12.5-Day_14.5, Day_14.5-Day_16.5, Day_16.5-Day_18.5, levels = design)
fit2_chem = contrasts.fit(fit, contrast.matrix_chem)
fit2_chem = eBayes(fit2_chem)

#extracting a list of top expressed genes
#create a table of top genes from linear model fit via topTable

topTable_chem_7.5_8.5 = topTable(fit2_chem, coef = 1, adjust.method="BH", p.value = 0.05, number = 6631) #104 for chem
write.csv(topTable_chem_7.5_8.5, file = "topTable_chem_7.5_8.5.csv")
topTable_chem_8.5_9.5 = topTable(fit2_chem, coef = 2, adjust.method="BH", p.value = 0.05, number = 6631)
write.csv(topTable_chem_8.5_9.5, file = "topTable_chem_8.5_9.5.csv")
topTable_chem_9.5_10.5 = topTable(fit2_chem, coef = 3, adjust.method="BH", p.value = 0.05, number = 6631)
write.csv(topTable_chem_9.5_10.5, file = "topTable_chem_9.5_10.5.csv")
topTable_chem_10.5_12.5 = topTable(fit2_chem, coef = 4, adjust.method="BH", p.value = 0.05, number = 6631)
write.csv(topTable_chem_10.5_12.5, file = "topTable_chem_10.5_12.5.csv")
topTable_chem_12.5_14.5 = topTable(fit2_chem, coef = 5, adjust.method="BH", p.value = 0.05, number = 6631)
write.csv(topTable_chem_12.5_14.5, file = "topTable_chem_12.5_14.5.csv")
topTable_chem_14.5_16.5 = topTable(fit2_chem, coef = 6, adjust.method="BH", p.value = 0.05, number = 6631)
write.csv(topTable_chem_14.5_16.5, file = "topTable_chem_14.5_16.5.csv")
topTable_chem_16.5_18.5 = topTable(fit2_chem, coef = 7, adjust.method="BH", p.value = 0.05, number = 6631)
write.csv(topTable_chem_16.5_18.5, file = "topTable_chem_16.5_18.5.csv")


# annotating differentially expressed genes

deg_list_chem = list(topTable_chem_7.5_8.5, topTable_chem_8.5_9.5, topTable_chem_9.5_10.5, topTable_chem_9.5_10.5, topTable_chem_10.5_12.5, topTable_chem_12.5_14.5, topTable_chem_14.5_16.5, topTable_chem_16.5_18.5)
deg_list_chem = lapply(deg_list_chem, function(x) merge(x, anno_chem, by.x = "X", by.y = "AFFY.Mouse430.2.probe", all = FALSE))

setwd("./deg_chem")

#splitting of the list into dataframes

anno_chem_7.5_8.5 = deg_list_chem[[1]]
anno_chem_7.5_8.5 = anno_chem_7.5_8.5[!duplicated(anno_chem_7.5_8.5$X),]
write.csv(anno_chem_7.5_8.5, file = "anno_chem_7.5_8.5.csv")

anno_chem_8.5_9.5 = deg_list_chem[[2]]
anno_chem_8.5_9.5 = anno_chem_8.5_9.5[!duplicated(anno_chem_8.5_9.5$X),]
write.csv(anno_chem_8.5_9.5, file = "anno_chem_8.5_9.5.csv")

anno_chem_9.5_10.5 = deg_list_chem[[3]]
anno_chem_9.5_10.5 = anno_chem_9.5_10.5[!duplicated(anno_chem_9.5_10.5$X),]
write.csv(anno_chem_9.5_10.5, file = "anno_chem_9.5_10.5.csv")

anno_chem_10.5_12.5 = deg_list_chem[[4]]
anno_chem_10.5_12.5 = anno_chem_10.5_12.5[!duplicated(anno_chem_10.5_12.5$X),]
write.csv(anno_chem_10.5_12.5, file = "anno_chem_10.5_12.5.csv")

anno_chem_12.5_14.5 = deg_list_chem[[5]]
anno_chem_12.5_14.5 = anno_chem_12.5_14.5[!duplicated(anno_chem_12.5_14.5$X),]
write.csv(anno_chem_12.5_14.5, file = "anno_chem_12.5_14.5.csv")

anno_chem_14.5_16.5 = deg_list_chem[[6]]
anno_chem_14.5_16.5 = anno_chem_14.5_16.5[!duplicated(anno_chem_14.5_16.5$X),]
write.csv(anno_chem_14.5_16.5, file = "anno_chem_14.5_16.5.csv")

anno_chem_16.5_18.5 = deg_list_chem[[7]]
anno_chem_16.5_18.5 = anno_chem_16.5_18.5[!duplicated(anno_chem_16.5_18.5$X),]
write.csv(anno_chem_16.5_18.5, file = "anno_chem_16.5_18.5.csv")





#############################################
#limma for Chemokines p=0.01
#############################################


#extracting a list of top expressed genes
#create a table of top genes from linear model fit via topTable

topTable_chem_7.5_8.5_p001 = topTable(fit2_chem, coef = 1, adjust.method="BH", p.value = 0.01, number = 6631) 
write.csv(topTable_chem_7.5_8.5_p001, file = "topTable_chem_7.5_8.5_p001.csv")
topTable_chem_8.5_9.5_p001 = topTable(fit2_chem, coef = 2, adjust.method="BH", p.value = 0.01, number = 6631)
write.csv(topTable_chem_8.5_9.5_p001, file = "topTable_chem_8.5_9.5_p001.csv")
topTable_chem_9.5_10.5_p001 = topTable(fit2_chem, coef = 3, adjust.method="BH", p.value = 0.01, number = 6631)
write.csv(topTable_chem_9.5_10.5_p001, file = "topTable_chem_9.5_10.5_p001.csv")
topTable_chem_10.5_12.5_p001 = topTable(fit2_chem, coef = 4, adjust.method="BH", p.value = 0.01, number = 6631)
write.csv(topTable_chem_10.5_12.5_p001, file = "topTable_chem_10.5_12.5_p001.csv")
topTable_chem_12.5_14.5_p001 = topTable(fit2_chem, coef = 5, adjust.method="BH", p.value = 0.01, number = 6631)
write.csv(topTable_chem_12.5_14.5_p001, file = "topTable_chem_12.5_14.5_p001.csv")
topTable_chem_14.5_16.5_p001 = topTable(fit2_chem, coef = 6, adjust.method="BH", p.value = 0.01, number = 6631)
write.csv(topTable_chem_14.5_16.5_p001, file = "topTable_chem_14.5_16.5_p001.csv")
topTable_chem_16.5_18.5_p001 = topTable(fit2_chem, coef = 7, adjust.method="BH", p.value = 0.01, number = 6631)
write.csv(topTable_chem_16.5_18.5_p001, file = "topTable_chem_16.5_18.5_p001.csv")


# annotating differentially expressed genes

deg_list_chem_p001 = list(topTable_chem_7.5_8.5_p001, topTable_chem_8.5_9.5_p001, topTable_chem_9.5_10.5_p001, topTable_chem_9.5_10.5_p001, topTable_chem_10.5_12.5_p001, topTable_chem_12.5_14.5_p001, topTable_chem_14.5_16.5_p001, topTable_chem_16.5_18.5_p001)
deg_list_chem_p001 = lapply(deg_list_chem_p001, function(x) merge(x, anno_chem, by.x = "X", by.y = "AFFY.Mouse430.2.probe", all = FALSE))

setwd("./deg_chem")

#splitting of the list into dataframes

anno_chem_7.5_8.5_p001 = deg_list_chem_p001[[1]]
anno_chem_7.5_8.5_p001 = anno_chem_7.5_8.5_p001[!duplicated(anno_chem_7.5_8.5_p001$X),]
write.csv(anno_chem_7.5_8.5_p001, file = "anno_chem_7.5_8.5_p001.csv")

anno_chem_8.5_9.5_p001 = deg_list_chem_p001[[2]]
anno_chem_8.5_9.5_p001 = anno_chem_8.5_9.5_p001[!duplicated(anno_chem_8.5_9.5_p001$X),]
write.csv(anno_chem_8.5_9.5_p001, file = "anno_chem_8.5_9.5_p001.csv")

anno_chem_9.5_10.5_p001 = deg_list_chem_p001[[3]]
anno_chem_9.5_10.5_p001 = anno_chem_9.5_10.5_p001[!duplicated(anno_chem_9.5_10.5_p001$X),]
write.csv(anno_chem_9.5_10.5_p001, file = "anno_chem_9.5_10.5_p001.csv")

anno_chem_10.5_12.5_p001 = deg_list_chem_p001[[4]]
anno_chem_10.5_12.5_p001 = anno_chem_10.5_12.5_p001[!duplicated(anno_chem_10.5_12.5_p001$X),]
write.csv(anno_chem_10.5_12.5_p001, file = "anno_chem_10.5_12.5_p001.csv")

anno_chem_12.5_14.5_p001 = deg_list_chem_p001[[5]]
anno_chem_12.5_14.5_p001 = anno_chem_12.5_14.5_p001[!duplicated(anno_chem_12.5_14.5_p001$X),]
write.csv(anno_chem_12.5_14.5_p001, file = "anno_chem_12.5_14.5_p001.csv")

anno_chem_14.5_16.5_p001 = deg_list_chem_p001[[6]]
anno_chem_14.5_16.5_p001 = anno_chem_14.5_16.5_p001[!duplicated(anno_chem_14.5_16.5_p001$X),]
write.csv(anno_chem_14.5_16.5_p001, file = "anno_chem_14.5_16.5_p001.csv")

anno_chem_16.5_18.5_p001 = deg_list_chem_p001[[7]]
anno_chem_16.5_18.5_p001 = anno_chem_16.5_18.5_p001[!duplicated(anno_chem_16.5_18.5_p001$X),]
write.csv(anno_chem_16.5_18.5_p001, file = "anno_chem_16.5_18.5_p001.csv")









#############################################
#Gene set enrichment analysis
#############################################


BiocManager::install("org.Mm.eg.db")
BiocManager::install("clusterProfiler")
BiocManager::install("pathview")
BiocManager::install("enrichplot")

library(clusterProfiler)
library(enrichplot)
library(org.Mm.eg.db)


gsea_tra_7.5_8.5 = anno_7.5_8.5$logFC
names(gsea_tra_7.5_8.5) = anno_7.5_8.5$X.entrezID.
gsea_tra_7.5_8.5 = na.omit(gsea_tra_7.5_8.5)
gsea_tra_7.5_8.5 = sort(gsea_tra_7.5_8.5, decreasing = TRUE)

gsea_tra_8.5_9.5 = anno_8.5_9.5$logFC
names(gsea_tra_8.5_9.5) = anno_8.5_9.5$X.entrezID.
gsea_tra_8.5_9.5 = na.omit(gsea_tra_8.5_9.5)
gsea_tra_8.5_9.5 = sort(gsea_tra_8.5_9.5, decreasing = TRUE)

gsea_tra_9.5_10.5 = anno_9.5_10.5$logFC
names(gsea_tra_9.5_10.5) = anno_9.5_10.5$X.entrezID.
gsea_tra_9.5_10.5 = na.omit(gsea_tra_9.5_10.5)
gsea_tra_9.5_10.5 = sort(gsea_tra_9.5_10.5, decreasing = TRUE)

gsea_tra_10.5_12.5 = anno_10.5_12.5$logFC
names(gsea_tra_10.5_12.5) = anno_10.5_12.5$X.entrezID.
gsea_tra_10.5_12.5 = na.omit(gsea_tra_10.5_12.5)
gsea_tra_10.5_12.5 = sort(gsea_tra_10.5_12.5, decreasing = TRUE)

gsea_tra_12.5_14.5 = anno_12.5_14.5$logFC
names(gsea_tra_12.5_14.5) = anno_12.5_14.5$X.entrezID.
gsea_tra_12.5_14.5 = na.omit(gsea_tra_12.5_14.5)
gsea_tra_12.5_14.5 = sort(gsea_tra_12.5_14.5, decreasing = TRUE)

gsea_tra_14.5_16.5 = anno_14.5_16.5$logFC
names(gsea_tra_14.5_16.5) = anno_14.5_16.5$X.entrezID.
gsea_tra_14.5_16.5 = na.omit(gsea_tra_14.5_16.5)
gsea_tra_14.5_16.5 = sort(gsea_tra_14.5_16.5, decreasing = TRUE)

gsea_tra_16.5_18.5 = anno_16.5_18.5$logFC
names(gsea_tra_16.5_18.5) = anno_16.5_18.5$X.entrezID.
gsea_tra_16.5_18.5 = na.omit(gsea_tra_16.5_18.5)
gsea_tra_16.5_18.5 = sort(gsea_tra_16.5_18.5, decreasing = TRUE)

gsea_list = list(gsea_tra_7.5_8.5, gsea_tra_8.5_9.5, gsea_tra_9.5_10.5, gsea_tra_10.5_12.5, gsea_tra_12.5_14.5, gsea_tra_14.5_16.5, gsea_tra_16.5_18.5)
gsea_names = c("day 7.5 to 8.5", "day 8.5 to 9.5", "day 9.5 to 10.5", "day 10.5 to 12.5", "day 12.5 to 14.5", "day 14.5 to 16.5", "day 16.5 to 18.5")
save_gsea_names = c("7.5_8.5", "8.5_9.5", "9.5_10.5", "10.5_12.5", "12.5_14.5", "14.5_16.5", "16.5_18.5")
gse_names = c("gsea_1", "gsea_2", "gsea_3", "gsea_4", "gsea_5", "gsea_6", "gsea_7")

setwd("./plots/GSEA")
require(DOSE)




#GSEA dotplotss with 20 categories

gse_1_20 = gseGO(geneList = gsea_tra_7.5_8.5,
                 ont = "BP",
                 keyType = "ENTREZID",
                 maxGSSize = 2000,
                 verbose = TRUE,
                 OrgDb = "org.Mm.eg.db",
                 pAdjustMethod = "none")
dotplot(gse_1_20, showCategory = 20, split = ".sign") +
  facet_grid(.~.sign) +
  labs(title = "Gene set enrichment analysis day 7.5 to day 8.5")
ggsave("GSEA_7.5_8.5_20_Dotplot.jpeg", height = 18, width = 18)


gse_2_20 = gseGO(geneList = gsea_tra_8.5_9.5,
                 ont = "BP",
                 keyType = "ENTREZID",
                 maxGSSize = 2000,
                 verbose = TRUE,
                 OrgDb = "org.Mm.eg.db",
                 pAdjustMethod = "none")
dotplot(gse_2_20, showCategory = 20, split = ".sign") +
  facet_grid(.~.sign) +
  labs(title = "Gene set enrichment analysis day 8.5 to day 9.5")
ggsave("GSEA_8.5_9.5_20_Dotplot.jpeg", height = 18, width = 18)


gse_3_20 = gseGO(geneList = gsea_tra_9.5_10.5,
                 ont = "BP",
                 keyType = "ENTREZID",
                 maxGSSize = 2000,
                 verbose = TRUE,
                 OrgDb = "org.Mm.eg.db",
                 pAdjustMethod = "none")
dotplot(gse_3_20, showCategory = 20, split = ".sign") +
  facet_grid(.~.sign) +
  labs(title = "Gene set enrichment analysis day 9.5 to day 10.5")
ggsave("GSEA_9.5_10.5_20_Dotplot.jpeg", height = 18, width = 18)



gse_4_20 = gseGO(geneList = gsea_tra_10.5_12.5,
                 ont = "BP",
                 keyType = "ENTREZID",
                 maxGSSize = 2000,
                 verbose = TRUE,
                 OrgDb = "org.Mm.eg.db",
                 pAdjustMethod = "none")
dotplot(gse_4_20, showCategory = 20, split = ".sign") +
  facet_grid(.~.sign) +
  labs(title = "Gene set enrichment analysis day 10.5 to day 12.5")
ggsave("GSEA_10.5_12.5_20_Dotplot.jpeg", height = 18, width = 18)


gse_5_20 = gseGO(geneList = gsea_tra_12.5_14.5,
                 ont = "BP",
                 keyType = "ENTREZID",
                 maxGSSize = 2000,
                 verbose = TRUE,
                 OrgDb = "org.Mm.eg.db",
                 pAdjustMethod = "none")
dotplot(gse_5_20, showCategory = 20, split = ".sign") +
  facet_grid(.~.sign) +
  labs(title = "Gene set enrichment analysis day 12.5 to day 14.5")
ggsave("GSEA_12.5_14.5_20_Dotplot.jpeg", height = 18, width = 18)


gse_6_20 = gseGO(geneList = gsea_tra_14.5_16.5,
                 ont = "BP",
                 keyType = "ENTREZID",
                 maxGSSize = 2000,
                 verbose = TRUE,
                 OrgDb = "org.Mm.eg.db",
                 pAdjustMethod = "none")
dotplot(gse_6_20, showCategory = 20, split = ".sign") +
  facet_grid(.~.sign) +
  labs(title = "Gene set enrichment analysis day 14.5 to day 16.5")
ggsave("GSEA_14.5_16.5_20_Dotplot.jpeg", height = 18, width = 18)


gse_7_20 = gseGO(geneList = gsea_tra_16.5_18.5,
                 ont = "BP",
                 keyType = "ENTREZID",
                 maxGSSize = 2000,
                 verbose = TRUE,
                 OrgDb = "org.Mm.eg.db",
                 pAdjustMethod = "none")
dotplot(gse_7_20, showCategory = 20, split = ".sign") +
  facet_grid(.~.sign) +
  labs(title = "Gene set enrichment analysis day 16.5 to day 18.5")
ggsave("GSEA_16.5_18.5_20_Dotplot.jpeg", height = 18, width = 18)






#############################################
#Venn diagrams
#############################################



anno_7.5_8.5 = read.csv("anno_7.5_8.5.csv")
anno_8.5_9.5 = read.csv("anno_8.5_9.5.csv")
anno_9.5_10.5 = read.csv("anno_9.5_10.5.csv")
anno_10.5_12.5 = read.csv("anno_10.5_12.5.csv")
anno_12.5_14.5 = read.csv("anno_12.5_14.5.csv")
anno_14.5_16.5 = read.csv("anno_14.5_16.5.csv")
anno_16.5_18.5 = read.csv("anno_16.5_18.5.csv")

deg_list_tras = list(anno_7.5_8.5, anno_8.5_9.5, anno_9.5_10.5, anno_9.5_10.5, anno_10.5_12.5, anno_12.5_14.5, anno_14.5_16.5, anno_16.5_18.5)
tops_names = c("7.5_8.5", "8.5_9.5", "9.5_10.5", "10.5_12.5", "12.5_14.5", "14.5_16.5", "16.5_18.5")

for (i in length(deg_list_tras)) {
  deg_list_tras[[i]] = deg_list_tras[[i]][(abs(deg_list_tras[[i]]$logFC) > 1.5),] 
  name = paste("tops_", tops_names[i], sep = " ", collapse = NULL)
  assign(name, deg_list_tras[[i]])
  write.csv(paste("tops_", tops_names[i], ".scv")) 
  
}


#select TRAs genes with absolute value of logFC > 1.5

tops_7.5_8.5 = anno_7.5_8.5[abs(anno_7.5_8.5$logFC) > 1.5,] #79
write.csv(tops_7.5_8.5, file = "tops_7.5_8.5.csv")
tops_8.5_9.5 = anno_8.5_9.5[abs(anno_8.5_9.5$logFC) > 1.5,] #14
write.csv(tops_8.5_9.5, file = "tops_8.5_9.5.csv")
tops_9.5_10.5 = anno_9.5_10.5[abs(anno_9.5_10.5$logFC) > 1.5,] #12
write.csv(tops_9.5_10.5, file = "tops_9.5_10.5.csv")
tops_10.5_12.5 = anno_10.5_12.5[abs(anno_10.5_12.5$logFC) > 1.5,] #12
write.csv(tops_10.5_12.5, file = "tops_10.5_12.5.csv")
tops_12.5_14.5 = anno_12.5_14.5[abs(anno_12.5_14.5$logFC) > 1.5,] #23
write.csv(tops_12.5_14.5, file = "tops_12.5_14.5.csv")
tops_14.5_16.5 = anno_14.5_16.5[abs(anno_14.5_16.5$logFC) > 1.5,] #22
write.csv(tops_14.5_16.5, file = "tops_14.5_16.5.csv")
tops_16.5_18.5 = anno_16.5_18.5[abs(anno_16.5_18.5$logFC) > 1.5,] #44
write.csv(tops_16.5_18.5, file = "tops_16.5_18.5.csv")


#---------------------
#venn diagrams of TRAs
#---------------------

tops_list_tra_up = list(tops_7.5_8.5[tops_7.5_8.5$logFC > 0, 2], tops_8.5_9.5[tops_8.5_9.5$logFC > 0,2], tops_9.5_10.5[tops_9.5_10.5$logFC > 0,2], tops_10.5_12.5[tops_10.5_12.5$logFC > 0,2], tops_12.5_14.5[tops_12.5_14.5$logFC > 0,2], tops_14.5_16.5[tops_14.5_16.5$logFC > 0, 2], tops_16.5_18.5[tops_16.5_18.5 > 0, 2])
tops_list_tra_down = list(tops_7.5_8.5[tops_7.5_8.5$logFC < 0, 2], tops_8.5_9.5[tops_8.5_9.5$logFC < 0,2], tops_9.5_10.5[tops_9.5_10.5$logFC < 0,2], tops_10.5_12.5[tops_10.5_12.5$logFC < 0,2], tops_12.5_14.5[tops_12.5_14.5$logFC < 0,2], tops_14.5_16.5[tops_14.5_16.5$logFC < 0, 2], tops_16.5_18.5[tops_16.5_18.5 > 0,2])

#venn diagram of top up-regulted TRAs

ggVennDiagram(tops_list_tra_up,
              category.names = venn_names,
              label_alpha = 0
) +
  ggtitle("Top up-regulated TRAs")+
  theme(plot.title = element_text(hjust = 0.5))+
  ggplot2::scale_fill_gradient(low = "blue", high = "yellow")
ggsave("venn_diagram_top_tras_up.jpeg", width = 12, height = 10)

#venn diagram of top down-regulated TRAs

ggVennDiagram(tops_list_tra_down,
              category.names = venn_names,
              label_alpha = 0
) +
  ggtitle("Top down-regulated TRAs")+
  theme(plot.title = element_text(hjust = 0.5))+
  ggplot2::scale_fill_gradient(low = "blue", high = "yellow")
ggsave("venn_diagram_top_tras_down.jpeg", width = 12, height = 10)

venn_names = c("day 7 to 8", "day 8 to 9", "day 9 to 10", "day 10 to 12", "day 12 to 14", "day 14 to 16", "day 16 to 18")

#venn diagram of all up-regulted TRAs

list_tra_up = list(topTable_7.5_8.5[topTable_7.5_8.5$logFC > 0, 2], topTable_8.5_9.5[topTable_8.5_9.5$logFC > 0, 2], topTable_9.5_10.5[topTable_9.5_10.5$logFC > 0, 2], topTable_10.5_12.5[topTable_10.5_12.5$logFC > 0, 2], topTable_12.5_14.5[topTable_12.5_14.5$logFC > 0, 2], topTable_14.5_16.5[topTable_14.5_16.5$logFC > 0, 2], topTable_16.5_18.5[topTable_16.5_18.5 > 0, 2])
list_tra_down = list(topTable_7.5_8.5[topTable_7.5_8.5$logFC < 0, 2], topTable_8.5_9.5[topTable_8.5_9.5$logFC < 0, ], topTable_9.5_10.5[topTable_9.5_10.5$logFC < 0, 2], topTable_10.5_12.5[topTable_10.5_12.5$logFC < 0, 2], topTable_12.5_14.5[topTable_12.5_14.5$logFC < 0, 2], topTable_14.5_16.5[topTable_14.5_16.5$logFC < 0, 2], topTable_16.5_18.5[topTable_16.5_18.5 > 0, 2])

ggVennDiagram(list_tra_up,
              category.names = venn_names,
              label_alpha = 0
) +
  ggtitle("All up-regulated genes")+
  theme(plot.title = element_text(hjust = 0.5))+
  ggplot2::scale_fill_gradient(low = "blue", high = "yellow")
ggsave("venn_diagram_all_tras_up.jpeg", width = 12, height = 10)
ggsave("venn_diagram_all_tras_up.pdf", width = 12, height = 10)

#venn diagram of all down-regulted TRAs 

ggVennDiagram(list_tra_down,
              category.names = venn_names,
              label_alpha = 0
) +
  ggtitle("All down-regulated genes")+
  theme(plot.title = element_text(hjust = 0.5))+
  ggplot2::scale_fill_gradient(low = "blue", high = "yellow")
ggsave("venn_diagram_all_tras_down.jpeg", width = 12, height = 10)
ggsave("venn_diagram_all_tras_down.pdf", width = 12, height = 10)

#--------------------------------
#venn diagrams of chemokine genes
#--------------------------------

tops_list_chem_up = list(tops_7.5_8.5[tops_7.5_8.5$logFC > 0, 2], tops_8.5_9.5[tops_8.5_9.5$logFC > 0,2], tops_9.5_10.5[tops_9.5_10.5$logFC > 0,2], tops_10.5_12.5[tops_10.5_12.5$logFC > 0,2], tops_12.5_14.5[tops_12.5_14.5$logFC > 0,2], tops_14.5_16.5[tops_14.5_16.5$logFC > 0, 2], tops_16.5_18.5[tops_16.5_18.5 > 0, 2])
tops_list_tra_down = list(tops_7.5_8.5[tops_7.5_8.5$logFC < 0, 2], tops_8.5_9.5[tops_8.5_9.5$logFC < 0,2], tops_9.5_10.5[tops_9.5_10.5$logFC < 0,2], tops_10.5_12.5[tops_10.5_12.5$logFC < 0,2], tops_12.5_14.5[tops_12.5_14.5$logFC < 0,2], tops_14.5_16.5[tops_14.5_16.5$logFC < 0, 2], tops_16.5_18.5[tops_16.5_18.5 > 0,2])

#venn diagram of top up-regulted chemokine genes

ggVennDiagram(tops_list_tra_up,
              category.names = venn_names,
              label_alpha = 0
) +
  ggtitle("Top up-regulated genes")+
  theme(plot.title = element_text(hjust = 0.5))+
  ggplot2::scale_fill_gradient(low = "blue", high = "yellow")
ggsave("venn_diagram_top_tras_up.jpeg", width = 12, height = 10)

#venn diagram of top down-regulated chemokine genes

ggVennDiagram(tops_list_tra_down,
              category.names = venn_names,
              label_alpha = 0
) +
  ggtitle("Top down-regulated genes")+
  theme(plot.title = element_text(hjust = 0.5))+
  ggplot2::scale_fill_gradient(low = "blue", high = "yellow")
ggsave("venn_diagram_top_tras_down.jpeg", width = 12, height = 10)

venn_names = c("day 7 to 8", "day 8 to 9", "day 9 to 10", "day 10 to 12", "day 12 to 14", "day 14 to 16", "day 16 to 18")


#venn diagram of all up-regulted chemokines genes

list_chem_up = list(anno_chem_7.5_8.5[anno_chem_7.5_8.5$logFC > 0, 2], anno_chem_8.5_9.5[anno_chem_8.5_9.5$logFC > 0, 2], anno_chem_9.5_10.5[anno_chem_9.5_10.5$logFC > 0, 2], anno_chem_10.5_12.5[anno_chem_10.5_12.5$logFC > 0, 2], anno_chem_12.5_14.5[anno_chem_12.5_14.5$logFC > 0, 2], anno_chem_14.5_16.5[anno_chem_14.5_16.5$logFC > 0, 2], anno_chem_16.5_18.5[anno_chem_16.5_18.5 > 0, 2])
list_chem_down = list(anno_chem_7.5_8.5[anno_chem_7.5_8.5$logFC < 0, 2], anno_chem_8.5_9.5[anno_chem_8.5_9.5$logFC < 0, ], anno_chem_9.5_10.5[anno_chem_9.5_10.5$logFC < 0, 2], anno_chem_10.5_12.5[anno_chem_10.5_12.5$logFC < 0, 2], anno_chem_12.5_14.5[anno_chem_12.5_14.5$logFC < 0, 2], anno_chem_14.5_16.5[anno_chem_14.5_16.5$logFC < 0, 2], anno_chem_16.5_18.5[anno_chem_16.5_18.5 > 0, 2])

ggVennDiagram(list_chem_up,
              category.names = venn_names,
              label_alpha = 0
) +
  ggtitle("All up-regulated chemokine genes")+
  theme(plot.title = element_text(hjust = 0.5))+
  ggplot2::scale_fill_gradient(low = "blue", high = "yellow")
ggsave("venn_diagram_all_chem_up.jpeg", width = 12, height = 10)
ggsave("venn_diagram_all_chem_up.pdf", width = 12, height = 10)

#venn diagram of all down-regulted chemokine genes

ggVennDiagram(list_chem_down,
              category.names = venn_names,
              label_alpha = 0
) +
  ggtitle("All down-regulated chemokine genes")+
  theme(plot.title = element_text(hjust = 0.5))+
  ggplot2::scale_fill_gradient(low = "blue", high = "yellow")
ggsave("venn_diagram_all_chem_down.jpeg", width = 12, height = 10)
ggsave("venn_diagram_all_chem_down.pdf", width = 12, height = 10)





#############################################
#chemokines expression over time 
#############################################


setwd("./rawdata/deg_chem")

anno_chem_7.5_8.5_p001 = read.csv("anno_chem_7.5_8.5_p001.csv", row.names = 1)
anno_chem_8.5_9.5_p001 = read.csv("anno_chem_8.5_9.5_p001.csv", row.names = 1)
anno_chem_9.5_10.5_p001 = read.csv("anno_chem_9.5_10.5_p001.csv", row.names = 1)
anno_chem_10.5_12.5_p001 = read.csv("anno_chem_10.5_12.5_p001.csv", row.names = 1)
anno_chem_12.5_14.5_p001 = read.csv("anno_chem_12.5_14.5_p001.csv", row.names = 1)
anno_chem_14.5_16.5_p001 = read.csv("anno_chem_14.5_16.5_p001.csv", row.names = 1)
anno_chem_16.5_18.5_p001 = read.csv("anno_chem_16.5_18.5_p001.csv", row.names = 1)


all_deg_chem = c(which(chem_data$X %in% anno_chem_7.5_8.5_p001$Row.names), # select differentially expressed chemokines in the dataframe
                 which(chem_data$X %in% anno_chem_8.5_9.5_p001$Row.names),
                 which(chem_data$X %in% anno_chem_9.5_10.5_p001$Row.names),
                 which(chem_data$X %in% anno_chem_10.5_12.5_p001$Row.names),
                 which(chem_data$X %in% anno_chem_12.5_14.5_p001$Row.names),
                 which(chem_data$X %in% anno_chem_14.5_16.5_p001$Row.names),
                 which(chem_data$X %in% anno_chem_16.5_18.5_p001$Row.names)
)

deg_chem_data = chem_data[all_deg_chem, ]

df = data.frame(deg_chem_data$MGI.symbol,
                rowMeans(deg_chem_data[,2:4]),
                rowMeans(deg_chem_data[,5:7]), 
                rowMeans(deg_chem_data[,8:10]),
                rowMeans(deg_chem_data[,11:13]),
                rowMeans(deg_chem_data[,14:15]),
                rowMeans(deg_chem_data[,16:17]),
                rowMeans(deg_chem_data[,18:19]),
                rowMeans(deg_chem_data[,20:21])
)

colnames(df) = c("X", "7.5", "8.5", "9.5", "10.5", "12.5", "14.5", "16.6", "18.5")

library(reshape2)
deg_chem_long = melt(df, id.vars = "X")



ggplot(data = deg_chem_long, aes(x = variable, y = value)) +
  geom_point(color = "orange") + 
  geom_line(color = "blue") +
  facet_wrap(~ X , nrow = 2) + 
  labs(x = "days of embryogenesis", y = "expression", title = "Chemokines expression through embryogenesis") 
ggsave("Chemokines expression through embryogenesis.pdf")




#############################################
#TRA expression over time 
#############################################


setwd("./rawdata/deg")

anno_7.5_8.5_p001 = read.csv("anno_7.5_8.5_p001.csv", row.names = 1)
anno_7.5_8.5_p001 = anno_7.5_8.5_p001[order(abs(anno_7.5_8.5_p001$logFC), decreasing = TRUE),]
top5_anno_7.5_8.5_p001 = anno_7.5_8.5_p001[1:5,]
anno_8.5_9.5_p001 = read.csv("anno_8.5_9.5_p001.csv", row.names = 1)
anno_8.5_9.5_p001 = anno_8.5_9.5_p001[order(abs(anno_8.5_9.5_p001$logFC), decreasing = TRUE),]
top5_anno_8.5_9.5_p001 = anno_8.5_9.5_p001[1:5,]
anno_9.5_10.5_p001 = read.csv("anno_9.5_10.5_p001.csv", row.names = 1)
anno_9.5_10.5_p001 = anno_9.5_10.5_p001[order(abs(anno_9.5_10.5_p001$logFC), decreasing = TRUE),]
top5_anno_9.5_10.5_p001 = anno_9.5_10.5_p001[1:5,]
anno_10.5_12.5_p001 = read.csv("anno_10.5_12.5_p001.csv", row.names = 1)
anno_10.5_12.5_p001 = anno_10.5_12.5_p001[order(abs(anno_10.5_12.5_p001$logFC), decreasing = TRUE),]
top5_anno_10.5_12.5_p001 = anno_10.5_12.5_p001[1:5,]
anno_12.5_14.5_p001 = read.csv("anno_12.5_14.5_p001.csv", row.names = 1)
anno_12.5_14.5_p001 = anno_12.5_14.5_p001[order(abs(anno_12.5_14.5_p001$logFC), decreasing = TRUE),]
top5_anno_12.5_14.5_p001 = anno_12.5_14.5_p001[1:5,]
anno_14.5_16.5_p001 = read.csv("anno_14.5_16.5_p001.csv", row.names = 1)
anno_14.5_16.5_p001 = anno_14.5_16.5_p001[order(abs(anno_14.5_16.5_p001$logFC), decreasing = TRUE),]
top5_anno_14.5_16.5_p001 = anno_14.5_16.5_p001[1:5,]
anno_16.5_18.5_p001 = read.csv("anno_16.5_18.5_p001.csv", row.names = 1)
anno_16.5_18.5_p001 = anno_16.5_18.5_p001[order(abs(anno_16.5_18.5_p001$logFC), decreasing = TRUE),]
top5_anno_16.5_18.5_p001 = anno_16.5_18.5_p001[1:5,]


all_deg_tra = c(which(tra_data$Row.names %in% top5_anno_7.5_8.5_p001$Row.names), # select differentially expressed chemokines in the dataframe
                which(tra_data$Row.names %in% top5_anno_8.5_9.5_p001$Row.names),
                which(tra_data$Row.names %in% top5_anno_9.5_10.5_p001$Row.names),
                which(tra_data$Row.names %in% top5_anno_10.5_12.5_p001$Row.names),
                which(tra_data$Row.names %in% top5_anno_12.5_14.5_p001$Row.names),
                which(tra_data$Row.names %in% top5_anno_14.5_16.5_p001$Row.names),
                which(tra_data$Row.names %in% top5_anno_16.5_18.5_p001$Row.names)
)

deg_tra_data = tra_data[all_deg_tra, ]
deg_tra_data$Transcript = str_c(deg_tra_data$Transcript, "  (", deg_tra_data$`"max.tissue"`, ")")

deg_tra_means = data.frame(deg_tra_data$Transcript,
                           rowMeans(deg_tra_data[,3:5]),
                           rowMeans(deg_tra_data[,6:8]), 
                           rowMeans(deg_tra_data[,9:11]),
                           rowMeans(deg_tra_data[,12:14]),
                           rowMeans(deg_tra_data[,15:16]),
                           rowMeans(deg_tra_data[,17:18]),
                           rowMeans(deg_tra_data[,19:20]),
                           rowMeans(deg_tra_data[,21:22])
)
colnames(deg_tra_means) = c("X", "7.5", "8.5", "9.5", "10.5", "12.5", "14.5", "16.6", "18.5")


library(reshape2)
deg_tra_long = melt(deg_tra_means, id.vars = "X")



ggplot(data = deg_tra_long, aes(x = variable, y = value)) +
  geom_point(color = "orange", size = 3) + 
  geom_line(color = "blue") +
  facet_wrap(~ X , nrow = 5) + 
  labs(x = "days of embryogenesis", y = "expression", title = "TRAs expression through embryogenesis") 
ggsave("tras expression through embryogenesis.jpeg", height = 15, width = 17)




















