#Bioinformatics Project 
#Summer Semester 2022
#Alina Aksianova, Lydia Steiner, Letizia Holube, Nina Bank
#Tutor: Ian Dirk Fichtner
#Betreuerin: Frau Dr. Maria Dinkelacker 



#############################################
#Quality Control ----
#############################################


#Load Libraries
#------------------
library(affy)
library(vsn)
library(AnnotationDbi)
library(mouse4302mmenstcdf, lib.loc = "./../packages") #download source files from brain array for "Affymetrix Mouse Genome 430 2.0 Array"
library(mouse4302mmenstprobe, lib.loc = "./../packages") #download source files from brain array for "Affymetrix Mouse Genome 430 2.0 Array"
library(mouse4302cdf)
library(hexbin)
library(limma)
library(AnnotationDbi)
library(tidyverse)
library(pheatmap)

#setting seed for end-to-end run-through
set.seed(123456)

#Read in .CEL files 
#----------------------

setwd("..") #go back to directory above the current one
setwd("./raw_data")

data.mouse=ReadAffy()
data.mouse@cdfName <- "Mouse4302_Mm_ENST"

setwd("..") 
setwd("./sessions/rds_files")
save(data.mouse, file="rawdata_mouse_28389.rds")


#-------------------------
#Single Chip Control ----
#-------------------------

setwd("..")
setwd("..")
setwd("./plots/qc/single_chip_control")


image(data.mouse[,1], col=rainbow(100, start=0, end=0.75)[100:1])
dev.copy2pdf(file="GSM701717_Mouse_E7_5_rep1.pdf", width= 9 , height=9)

image(data.mouse[,2], col=rainbow(100, start=0, end=0.75)[100:1])
dev.copy2pdf(file="GSM701717_Mouse_E7_5_rep2.pdf", width= 9 , height=9)

image(data.mouse[,3], col=rainbow(100, start=0, end=0.75)[100:1])
dev.copy2pdf(file="GSM701717_Mouse_E7_5_rep3.pdf", width= 9 , height=9)

image(data.mouse[,4], col=rainbow(100, start=0, end=0.75)[100:1])
dev.copy2pdf(file="GSM701717_Mouse_E8_5_rep1.pdf", width= 9 , height=9)

image(data.mouse[,5], col=rainbow(100, start=0, end=0.75)[100:1])
dev.copy2pdf(file="GSM701717_Mouse_E8_5_rep2.pdf", width= 9 , height=9)

image(data.mouse[,6], col=rainbow(100, start=0, end=0.75)[100:1])
dev.copy2pdf(file="GSM701717_Mouse_E8_5_rep3.pdf", width= 9 , height=9)

image(data.mouse[,7], col=rainbow(100, start=0, end=0.75)[100:1])
dev.copy2pdf(file="GSM701717_Mouse_E9_5_rep1.pdf", width= 9 , height=9)

image(data.mouse[,8], col=rainbow(100, start=0, end=0.75)[100:1])
dev.copy2pdf(file="GSM701717_Mouse_E9_5_rep2.pdf", width= 9 , height=9)

image(data.mouse[,9], col=rainbow(100, start=0, end=0.75)[100:1])
dev.copy2pdf(file="GSM701717_Mouse_E9_5_rep3.pdf", width= 9 , height=9)

image(data.mouse[,10], col=rainbow(100, start=0, end=0.75)[100:1])
dev.copy2pdf(file="GSM701717_Mouse_E10_5_rep1.pdf", width= 9 , height=9)

image(data.mouse[,11], col=rainbow(100, start=0, end=0.75)[100:1])
dev.copy2pdf(file="GSM701717_Mouse_E10_5_rep2.pdf", width= 9 , height=9)

image(data.mouse[,12], col=rainbow(100, start=0, end=0.75)[100:1])
dev.copy2pdf(file="GSM701717_Mouse_E10_5_rep3.pdf", width= 9 , height=9)

image(data.mouse[,13], col=rainbow(100, start=0, end=0.75)[100:1])
dev.copy2pdf(file="GSM701717_Mouse_E12_5_rep1.pdf", width= 9 , height=9) #looks suspicious

image(data.mouse[,14], col=rainbow(100, start=0, end=0.75)[100:1])
dev.copy2pdf(file="GSM701717_Mouse_E12_5_rep2.pdf", width= 9 , height=9)

image(data.mouse[,15], col=rainbow(100, start=0, end=0.75)[100:1])
dev.copy2pdf(file="GSM701717_Mouse_E14_5_rep1.pdf", width= 9 , height=9)

image(data.mouse[,16], col=rainbow(100, start=0, end=0.75)[100:1])
dev.copy2pdf(file="GSM701717_Mouse_E14_5_rep2.pdf", width= 9 , height=9)

image(data.mouse[,17], col=rainbow(100, start=0, end=0.75)[100:1])
dev.copy2pdf(file="GSM701717_Mouse_E16_5_rep1.pdf", width= 9 , height=9)

image(data.mouse[,18], col=rainbow(100, start=0, end=0.75)[100:1])
dev.copy2pdf(file="GSM701717_Mouse_E16_5_rep2.pdf", width= 9 , height=9)

image(data.mouse[,19], col=rainbow(100, start=0, end=0.75)[100:1])
dev.copy2pdf(file="GSM701717_Mouse_E18_5_rep1.pdf", width= 9 , height=9)

image(data.mouse[,20], col=rainbow(100, start=0, end=0.75)[100:1])
dev.copy2pdf(file="GSM701717_Mouse_E18_5_rep2.pdf", width= 9 , height=9)



#------------------
#Normalization----
#------------------

mouse.vsnrma <- vsnrma(data.mouse)

setwd("..")
setwd("..")
setwd("..")
setwd("./sessions/rds_files")
save(mouse.vsnrma, file="normalized_data_28389.rds")


#meanSdPlot
#----------------

meanSdPlot(mouse.vsnrma)

setwd("..")
setwd("..")
setwd("./plots/qc")
dev.copy2pdf(file="GSE28389_meanSdPlot_normalized.pdf")


#Boxplot
#-------------
# Before normalization:
# Setting parameters:
par(las=2)
mmi=c(2.2,1,1.04,0.9)
par(mai=mmi)
boxplot(data.mouse, col= rainbow(20), cex.axis=0.75,
        main="Gene expression in different stages of mouse embroyogenesis before vsnrma-normalization \nGSE28389 (Irie et al., 2011)")

dev.copy2pdf(file="GSE28389_BoxPlot_before_norm.pdf")


# After Normalization:

par(las=2)
mmi=c(2.2,1,1.1,0.9)
par(mai=mmi)
boxplot(exprs(mouse.vsnrma), col= rainbow(20), cex.axis=0.75,
        main="Gene expression in different stages of mouse embroyogenesis after vsnrma-normalization \nGSE28389 (Irie et al., 2011)")

dev.copy2pdf(file="GSE28389_BoxPlot_normalizeddata.pdf")


#RNA Degradation Plot
#-----------------------------

rnadeg.raw = AffyRNAdeg(data.mouse)

plotAffyRNAdeg(rnadeg.raw, col=rainbow(20))
title(sub="Mouse embryogenesis data before vsnrma normalization")

dev.copy2pdf(file="GSE28389_RNAdegrad_RawData_shifted_scaled.pdf")

plotAffyRNAdeg(rnadeg.raw, col=rainbow(20), transform= "shift.only")
title(sub="Mouse embryogenesis data before vsnrma normalization, shifted")

dev.copy2pdf(file="GSE28389_RNAdegrad_RawData_Shifted_only.pdf")

#Scatter Plot
#-------------------

setwd("scatter_plots")

for(i in 1:19){
  
  plot(exprs(mouse.vsnrma)[,c(i,i+1)],pch=".")
  abline(0,1,col="red")
  
  title(main=paste("Scatterplot of probe '", colnames(mouse.vsnrma)[i],"' and '", 
                   colnames(mouse.vsnrma)[i+1],"'",sep = " ", collapse= NULL))
  
  file.name= paste("GSE28389_scatterplot_probe",as.character(i),"_and_probe", as.character(i+1),".pdf")
  dev.copy2pdf(file= file.name, width=10, height=9)
  dev.off()
}



#############################################
#Exploratory Data Analysis----
#############################################

setwd("./../../..")
setwd("./raw_data")
eset = exprs(mouse.vsnrma)
eset = eset[65:53573,] #delete Affymetrix internal quality control
eset = read.csv(file = "eset.csv", row.names = 1)

anno = read_table(file="mart_export1.txt")


tra_table = read_table(file="tra.2014.mouse.4301.5x.table.tsv")
tra_table = unique(tra_table)


#Replace blanks with NAs:

setwd("./../tables")
tra_table[tra_table == "\"\""] <- NA                    
write.csv(tra_table, file = "tra_table.csv")


#Remove "" from TRA table

tra_table = tra_table %>% 
  mutate(across(
    everything(),
    ~ map_chr(.x, ~ gsub("\"", "", .x))
  ))
names(tra_table) = gsub('"', "", names(tra_table))


#Annotating our gene expression table

anno_data = merge(eset, anno, by.x = 0, by.y = "AFFY.Mouse430.2.probe", all = FALSE)
anno_data = anno_data[!duplicated(anno_data$Gene.stable.ID),] #delete duplicates
write.csv(anno_data, file = "anno_data.csv")


#Merging TRA table with annotated gene expression table, not-overlapping entries excluded

tra_table = as.data.frame(tra_table)
tra_data = merge(anno_data, tra_table, by.x = "Transcript.stable.ID", by.y ="ensembl.transcript", all = FALSE)
tra_data = tra_data[!duplicated(tra_data$Row.names),]
colnames(tra_data)[2] = "AFFY.Mouse430.2.probe"
write.csv(tra_data, file = "TRA_data.csv")


#Annotating TRA table

tra_anno = merge(anno, tra_table, by.x = "Transcript.stable.ID",by.y = "ensembl.transcript", all = FALSE)
write.csv(tra_anno, file = "tra_anno.csv")

#Barplot of frequency of TRAs in our data frame

setwd("./../plots/TRAs_barplots")

ggplot(data = tra_data) +
  geom_bar(mapping = aes(x = max.tissue, fill = max.tissue), show.legend = FALSE) +
  coord_flip() +
  labs(title = "6521 TRAs in GSE28389") +
  ylab("Tissues") +
  theme(plot.title = element_text(hjust = 0.5))

ggsave("barplot_tras_in_the_dataset.jpg", width = 12, height = 10)


#############################################
#PCA for TRA----
#############################################

library("limma")
library("Biobase")
library("tidyverse")
library("ggfortify")

set.seed(123456)
tra_data2.pca <- prcomp(t(tra_data [,3:22]), center = TRUE, scale = TRUE) #scale true sets the standard deviations of all variables to be equal to 1, so all variables can have an equal effect on the ordination.


#Set the labels

Days=c("7.5", "7.5", "7.5", "8.5", "8.5", "8.5", "9.5", "9.5", "9.5", "10.5", "10.5", "10.5", "12.5", "12.5", "14.5", "14.5", "16.5", "16.5", "18.5", "18.5")
Days = factor(Days, 
              levels = c("7.5", "8.5", "9.5", "10.5", "12.5", "14.5", "16.5", "18.5"))


# Inspect new PCA object and its variation accounting

tra_data2.pca.varprop <- tra_data2.pca %>% summary() %>% pluck("importance")
tra_data2.pca.varprop[c(1,2), ]
summary(tra_data2.pca) #Importance of components


# Plotting PC1 vs. PC2

pca_tra.fig <- ggplot(tra_data2.pca$x %>% as.data.frame()) + 
  geom_point(aes(x = PC1, y = PC2)) +
  ggtitle("TRAs PCA") +
  theme(plot.title = element_text(hjust = 0.5))+
  aes(color = Days, legend = FALSE)

pca_tra.fig

setwd("./../PCA/PCA_TRAs")
dev.copy2pdf(file="tra_PCA_1vs2.pdf")


autoplot(tra_data2.pca, label = TRUE, label.size = 2.5, ylim = c(-0.4, 0.4), xlim = c(-0.4, 0.5))+
  aes(color = Days, legend = FALSE) +
  ggtitle("TRAs PCA")+
  theme(plot.title = element_text(hjust = 0.5))

dev.copy2pdf(file="tra_PCA_with_labels.pdf")


autoplot(tra_data2.pca, label = FALSE, label.size = 2.5, ylim = c(-0.4, 0.4), xlim = c(-0.4, 0.5))+
  aes(color = Days, legend = FALSE) +
  ggtitle("TRAs PCA")+
  theme(plot.title = element_text(hjust = 0.5))

dev.copy2pdf(file="tra_PCA_no_labels.pdf")

# Plotting PC2 vs. PC3

pca_tra_2vs3.fig <- ggplot(tra_data2.pca$x %>% as.data.frame()) + 
  geom_point(aes(x = PC2, y = PC3)) +
  ggtitle("TRAs PC2 vs. PC3") +
  theme(plot.title = element_text(hjust = 0.5))+
  aes(color = Days, legend = FALSE)

pca_tra_2vs3.fig

dev.copy2pdf(file="tra_PCA_2vs3.pdf")


#Plotting PC3 vs. PC4

pca_tra_3v4.fig <- ggplot(tra_data2.pca$x %>% as.data.frame()) + 
  geom_point(aes(x = PC3, y = PC4)) +
  ggtitle("TRAs PC3 vs. PC4") +
  theme(plot.title = element_text(hjust = 0.5))+
  aes(color = Days, legend = FALSE)

pca_tra_3v4.fig

dev.copy2pdf(file="tra_PCA_3vs4.pdf")


#Plotting PC4 vs. PC5

pca_tra_4v5.fig <- ggplot(tra_data2.pca$x %>% as.data.frame()) + 
  geom_point(aes(x = PC4, y = PC5)) +
  ggtitle("TRAs PC4 vs. PC5") +
  theme(plot.title = element_text(hjust = 0.5))+
  aes(color = Days, legend = FALSE)

pca_tra_4v5.fig

dev.copy2pdf(file="tra_PCA_4vs5.pdf")


#Plotting PC5 vs. PC6

pca_tra_5v6.fig <- ggplot(tra_data2.pca$x %>% as.data.frame()) + 
  geom_point(aes(x = PC5, y = PC6)) +
  ggtitle("TRAs PC5 vs. PC6") +
  theme(plot.title = element_text(hjust = 0.5))+
  aes(color = Days, legend = FALSE)

pca_tra_5v6.fig

dev.copy2pdf(file="tra_PCA_5vs6.pdf")


#Plotting PC6 vs. PC7

pca_tra_6v7.fig <- ggplot(tra_data2.pca$x %>% as.data.frame()) + 
  geom_point(aes(x = PC6, y = PC7)) +
  ggtitle("TRAs PC6 vs. PC7") +
  theme(plot.title = element_text(hjust = 0.5))+
  aes(color = Days, legend = FALSE)

pca_tra_6v7.fig

dev.copy2pdf(file="tra_PCA_6vs7.pdf")


#plotting PC7 vs PC8

pca_tra_7v8.fig <- ggplot(tra_data2.pca$x %>% as.data.frame()) + 
  geom_point(aes(x = PC7, y = PC8)) +
  theme(plot.title = element_text(hjust = 0.5))+
  ggtitle("TRAs PC7 vs. PC8") +
  aes(color = Days, legend = FALSE)

pca_tra_7v8.fig

dev.copy2pdf(file="tra_PCA_7vs8.pdf")


#Plotting PC8 vs PC9

pca_tra_8v9.fig <- ggplot(tra_data2.pca$x %>% as.data.frame()) + 
  geom_point(aes(x = PC8, y = PC9)) +
  ggtitle("TRAs PC8 vs. PC9") +
  theme(plot.title = element_text(hjust = 0.5))+
  aes(color = Days, legend = FALSE)

pca_tra_8v9.fig

dev.copy2pdf(file="tra_PCA_8vs9.pdf")


#Plotting PC9 vs PC10

pca_tra_9v10.fig <- ggplot(tra_data2.pca$x %>% as.data.frame()) + 
  geom_point(aes(x = PC9, y = PC10)) +
  ggtitle("TRAs PC9 vs. PC10") +
  theme(plot.title = element_text(hjust = 0.5))+
  aes(color = Days, legend = FALSE)

pca_tra_9v10.fig

dev.copy2pdf(file="tra_PCA_9vs10.pdf")


#Plotting PC10 vs PC11

pca_tra_10v11.fig <- ggplot(tra_data2.pca$x %>% as.data.frame()) + 
  geom_point(aes(x = PC10, y = PC11)) +
  ggtitle("TRAs PC10 vs. PC11") +
  theme(plot.title = element_text(hjust = 0.5))+
  aes(color = Days, legend = FALSE)

pca_tra_10v11.fig

dev.copy2pdf(file="tra_PCA_10vs11.pdf")


#Plotting PC11 vs PC12

pca_tra_11v12.fig <- ggplot(tra_data2.pca$x %>% as.data.frame()) + 
  geom_point(aes(x = PC11, y = PC12)) +
  ggtitle("TRAs PC11 vs. PC12") +
  theme(plot.title = element_text(hjust = 0.5))+
  aes(color = Days, legend = FALSE)

pca_tra_11v12.fig

dev.copy2pdf(file="tra_PCA_11vs12.pdf")


#Plotting PC12 vs PC13

pca_tra_12v13.fig <- ggplot(tra_data2.pca$x %>% as.data.frame()) + 
  geom_point(aes(x = PC12, y = PC13)) +
  ggtitle("TRAs PC12 vs. PC13") +
  theme(plot.title = element_text(hjust = 0.5))+
  aes(color = Days, legend = FALSE)

pca_tra_12v13.fig

dev.copy2pdf(file="tra_PCA_12vs13.pdf")


#‘arm-bend’ represents a decrease in cumulative contribution 

plot(tra_data2.pca, main="Arm bend PCA", type="lines")
dev.copy2pdf(file="Arm_bend_PCA_tra.pdf")



#############################################
#t-SNE----
#############################################

library(devtools)
library(factoextra) #for visualization of PCA results
library(Rtsne)
library(tibble) #to convert rownames to column

#Explore the PCA results

get_eig(tra_data2.pca)
results_of_variables_tra = get_pca_var(tra_data2.pca)


# Coordinates of variables

coordinates_tra = results_of_variables_tra$coord
coordinates_tra


# Cos2 of variables

results_of_variables_tra$cos2


# Contribution of variables

results_of_variables_tra$contrib


PCA_matrix_not_transposed = tra_data2.pca[["x"]]


setwd("./../../t-SNE")
#Only do t-SNE on the first 14 PCs to cover 95%

PCA_matrix_not_transposed = PCA_matrix_not_transposed[ ,1:14]


#Reproducibility

set.seed(12356)


#Performing t-SNE calculation

tsne_results_matrix_2 = Rtsne(PCA_matrix_not_transposed, perplexity=2, check_duplicates = FALSE)
tsne_results_matrix_3 = Rtsne(PCA_matrix_not_transposed, perplexity=3, check_duplicates = FALSE)
tsne_results_matrix_4 = Rtsne(PCA_matrix_not_transposed, perplexity=4, check_duplicates = FALSE)

labels = c("E7.5_1", "E7.5_2", "E7.5_3",
           "E8.5_1", "E8.5_2", "E8.5_3",
           "E9.5_1", "E9.5_2", "E9.5_3",
           "E10.5_1", "E10.5_2", "E10.5_3",
           "E12.5_1", "E12.5_2",
           "E14.5_1", "E14.5_2",
           "E16.5_1", "E16.5_2",
           "E18.5_1", "E18.5_2")

#Plot the results 

plot(tsne_results_matrix_2$Y, col = "blue", pch = 1, cex = 1.5, main ="t-SNE with perplexity 2", xlab = "t-SNE 1", ylab = "t-SNE 2", xlim = c(-200, 400))
text(tsne_results_matrix_2$Y, labels, cex=0.6, pos=4, col="red")
dev.copy2pdf(file="t-SNE_perplexity_2.pdf")

plot(tsne_results_matrix_3$Y, col = "blue", pch = 1, cex = 1.5, main ="t-SNE with perplexity 3", xlab = "t-SNE 1", ylab = "t-SNE 2", xlim = c(-200, 400))
text(tsne_results_matrix_3$Y, labels, cex=0.6, pos=4, col="red")
dev.copy2pdf(file="t-SNE_perplexity_3.pdf")

plot(tsne_results_matrix_4$Y, col = "blue", pch = 1, cex = 1.5, main ="t-SNE with perplexity 4", xlab = "t-SNE 1", ylab = "t-SNE 2", xlim = c(-200, 400))
text(tsne_results_matrix_4$Y, labels, cex=0.6, pos=4, col="red")
dev.copy2pdf(file="t-SNE_perplexity_4.pdf")



##Plot and Cluster
library(mclust)
library(cluster)
library(ggplot2)
library(dplyr)
library(magrittr)
library(ggrepel)
library(factoextra)

#Perplexity 2
#Give the data a new name
df <- tsne_results_matrix_2$Y
df = data.frame(df)
rownames(df) = labels

#find out optimal count of clusters
fviz_nbclust(df, FUNcluster = kmeans, method = "wss")+
  labs(subtitle = "Perplexity = 2")


#kmeans with k = 4 clusters
km <- kmeans(df, centers = 4, nstart = 25)

#Plot it
fviz_cluster(km, data = df, axes = c(-4, 4), main = "t-SNE with perplexity 2, k-means clustering",
             xlab = "t-SNE 1", ylab = "t-SNE 2", xlim = c(-2, 2), ylim = c(-2,2))
dev.copy2pdf(file="t-SNE_perplexity_2_kmeans.pdf")


#Same for perplexity 3
df3 <- tsne_results_matrix_3$Y
df3 = data.frame(df3)
rownames(df3) = labels
fviz_nbclust(df3, FUNcluster = kmeans, method = "wss")+
  labs(subtitle = "Perplexity = 3")
km3 <- kmeans(df3, centers = 4, nstart = 25)
fviz_cluster(km3, data = df3, axes = c(-4, 4), main = "t-SNE with perplexity 3, k-means clustering",
             xlab = "t-SNE 1", ylab = "t-SNE 2", xlim = c(-2, 2), ylim = c(-2,2))
dev.copy2pdf(file="t-SNE_perplexity_3_kmeans.pdf")


#Same for perplexity 4
df4 <- tsne_results_matrix_4$Y
df4 = data.frame(df4)
rownames(df4) = labels
fviz_nbclust(df4, FUNcluster = kmeans, method = "wss")+
  labs(subtitle = "Perplexity = 4")
km4 <- kmeans(df4, centers = 3, nstart = 25)
fviz_cluster(km4, data = df4, axes = c(-4, 4), main = "t-SNE with perplexity 4, k-means clustering",
             xlab = "t-SNE 1", ylab = "t-SNE 2", xlim = c(-2, 2), ylim = c(-2,2))
dev.copy2pdf(file="t-SNE_perplexity_4_kmeans.pdf")



#############################################
#UMAP
#############################################
library(umap)

setwd("./../UMAP")

set.seed(123456)

umap_results_matrix_nneighbor_15 = umap(PCA_matrix_not_transposed, n_neighbors=15)
umap_results_matrix_nneighbor_20 = umap(PCA_matrix_not_transposed, n_neighbors=20)
umap_results_matrix_nneighbor_5 = umap(PCA_matrix_not_transposed, n_neighbors=5)


df15 <- umap_results_matrix_nneighbor_15$layout
df15 = data.frame(df15)
rownames(df15) = labels
fviz_nbclust(df15, FUNcluster = kmeans, method = "wss")
km15 <- kmeans(df15, centers = 3, nstart = 25)
fviz_cluster(km15, data = df15, axes = c(-4, 4), main = "UMAP, nearest neighbors = 15, k-means clustering",
             xlab = "UMAP 1", ylab = "UMAP 2", xlim = c(-2, 2), ylim = c(-2,2))
dev.copy2pdf(file="UMAP_nneighobs_15_kmeans.pdf")


df20 <- umap_results_matrix_nneighbor_20$layout
df20 = data.frame(df20)
rownames(df20) = labels
fviz_nbclust(df20, FUNcluster = kmeans, method = "wss")
km20 <- kmeans(df20, centers = 3, nstart = 25)
fviz_cluster(km20, data = df20, axes = c(-4, 4), main = "UMAP, nearest neighbors = 20, k-means clustering",
             xlab = "UMAP 1", ylab = "UMAP 2", xlim = c(-2, 2), ylim = c(-2,2))
dev.copy2pdf(file="UMAP_nneighobs_20_kmeans.pdf")


df5 <- umap_results_matrix_nneighbor_5$layout
df5 = data.frame(df5)
rownames(df5) = labels
fviz_nbclust(df5, FUNcluster = kmeans, method = "wss")
km5 <- kmeans(df5, centers = 2, nstart = 25)
fviz_cluster(km5, data = df5, axes = c(-4, 4), main = "UMAP, nearest neighbors = 5, k-means clustering",
             xlab = "UMAP 1", ylab = "UMAP 2", xlim = c(-2, 2), ylim = c(-2,2))
dev.copy2pdf(file="UMAP_nneighobs_5_kmeans.pdf")



#############################################
#limma for TRAs p=0.05----
#############################################


tra_data_not_anno = tra_data[,2:22]

setwd("./../../tables/limma_TRAs_p005")


#making design matrix

design = model.matrix(~ 0+factor(c(1,1,1,2,2,2,3,3,3,4,4,4,5,5,6,6,7,7,8,8)))
colnames(design) = c("Day_7.5", "Day_8.5", "Day_9.5", "Day_10.5", "Day_12.5", "Day_14.5", "Day_16.5", "Day_18.5")

fit = lmFit(tra_data_not_anno, design) #Fit linear model for each gene given a series of arrays

# making pairwise comparisons

contrast.matrix = makeContrasts(Day_7.5-Day_8.5, Day_8.5-Day_9.5, Day_9.5-Day_10.5, Day_10.5-Day_12.5, Day_12.5-Day_14.5, Day_14.5-Day_16.5, Day_16.5-Day_18.5, levels = design)
fit2 = contrasts.fit(fit, contrast.matrix)
fit2 = eBayes(fit2)

#extracting a list of top exressed genes

topTable7.5_8.5 = topTable(fit2, coef = 1, adjust.method="BH", p.value = 0.05, number = 6631)
write.csv(topTable7.5_8.5, file = "topTable7.5_8.5.csv")
topTable8.5_9.5 = topTable(fit2, coef = 2, adjust.method="BH", p.value = 0.05, number = 6631)
write.csv(topTable8.5_9.5, file = "topTable8.5_9.5.csv")
topTable9.5_10.5 = topTable(fit2, coef = 3, adjust.method="BH", p.value = 0.05, number = 6631)
write.csv(topTable9.5_10.5, file = "topTable9.5_10.5.csv")
topTable10.5_12.5 = topTable(fit2, coef = 4, adjust.method="BH", p.value = 0.05, number = 6631)
write.csv(topTable10.5_12.5, file = "topTable10.5_12.5.csv")
topTable12.5_14.5 = topTable(fit2, coef = 5, adjust.method="BH", p.value = 0.05, number = 6631)
write.csv(topTable12.5_14.5, file = "topTable12.5_14.5.csv")
topTable14.5_16.5 = topTable(fit2, coef = 6, adjust.method="BH", p.value = 0.05, number = 6631)
write.csv(topTable14.5_16.5, file = "topTable14.5_16.5.csv")
topTable16.5_18.5 = topTable(fit2, coef = 7, adjust.method="BH", p.value = 0.05, number = 6631)
write.csv(topTable16.5_18.5, file = "topTable16.5_18.5.csv")


# annotating differentially expressed genes

deg_list = list(topTable7.5_8.5, topTable8.5_9.5, topTable9.5_10.5, topTable10.5_12.5, topTable12.5_14.5, topTable14.5_16.5, topTable16.5_18.5)
deg_list = lapply(deg_list, function(x) merge(x, tra_anno, by.x = "AFFY.Mouse430.2.probe", by.y = "AFFY.Mouse430.2.probe", all = FALSE))


#splitting of the list into dataframes

setwd("./annotated")

anno_7.5_8.5 = deg_list[[1]]
anno_7.5_8.5 = anno_7.5_8.5[!duplicated(anno_7.5_8.5$AFFY.Mouse430.2.probe),]
write.csv(anno_7.5_8.5, file = "anno_7.5_8.5.csv")

anno_8.5_9.5 = deg_list[[2]]
anno_8.5_9.5 = anno_8.5_9.5[!duplicated(anno_8.5_9.5$AFFY.Mouse430.2.probe),]
write.csv(anno_8.5_9.5, file = "anno_8.5_9.5.csv")

anno_9.5_10.5 = deg_list[[3]]
anno_9.5_10.5 = anno_9.5_10.5[!duplicated(anno_9.5_10.5$AFFY.Mouse430.2.probe),]
write.csv(anno_9.5_10.5, file = "anno_9.5_10.5.csv")

anno_10.5_12.5 = deg_list[[4]]
anno_10.5_12.5 = anno_10.5_12.5[!duplicated(anno_10.5_12.5$AFFY.Mouse430.2.probe),]
write.csv(anno_10.5_12.5, file = "anno_10.5_12.5.csv")

anno_12.5_14.5 = deg_list[[5]]
anno_12.5_14.5 = anno_12.5_14.5[!duplicated(anno_12.5_14.5$AFFY.Mouse430.2.probe),]
write.csv(anno_12.5_14.5, file = "anno_12.5_14.5.csv")

anno_14.5_16.5 = deg_list[[6]]
anno_14.5_16.5 = anno_14.5_16.5[!duplicated(anno_14.5_16.5$AFFY.Mouse430.2.probe),]
write.csv(anno_14.5_16.5, file = "anno_14.5_16.5.csv")

anno_16.5_18.5 = deg_list[[7]]
anno_16.5_18.5 = anno_16.5_18.5[!duplicated(anno_16.5_18.5$AFFY.Mouse430.2.probe),]
write.csv(anno_16.5_18.5, file = "anno_16.5_18.5.csv")

deg_list = list(anno_7.5_8.5, anno_8.5_9.5, anno_9.5_10.5, anno_10.5_12.5, anno_12.5_14.5, anno_14.5_16.5, anno_16.5_18.5)

#barplots 

setwd("./../../../plots/limma_TRAs/Barplots_p005")

degs_barplot_names = c("7.5 and 8.5", "8.5 and 9.5", "9.5 and 10.5", "10.5 and 12.5", "12.5 and 14.5", "14.5 and 16.5", "16.5 and 18.5")
save_degs_barplot_names = c("7.5_8.5", "8.5_9.5", "9.5_10.5", "10.5_12.5", "12.5_14.5", "14.5_16.5", "16.5_18.5")

for (i in 1:length(deg_list)){
  ggplot(data = deg_list[[i]]) +
    geom_bar(mapping = aes(x = max.tissue, fill = max.tissue), show.legend = FALSE) +
    coord_flip() +
    ggtitle(paste("Differentially expressed genes between", degs_barplot_names[i], sep = " ", collapse= NULL))+
    theme(plot.title = element_text(hjust = 0.5))
  ggsave(paste("barplot_", save_degs_barplot_names[i], ".jpeg"), width = 12, height = 10)
}



#############################################
#limma for TRAs p=0.01----
#############################################

setwd("./../../../tables/limma_TRAs_p001")

topTable7.5_8.5_p001 = topTable(fit2, coef = 1, adjust.method="BH", p.value = 0.01, number = 6631)
write.csv(topTable7.5_8.5_p001, file = "topTable7.5_8.5_p001.csv")
topTable8.5_9.5_p001 = topTable(fit2, coef = 2, adjust.method="BH", p.value = 0.01, number = 6631)
write.csv(topTable8.5_9.5_p001, file = "topTable8.5_9.5_p001.csv")
topTable9.5_10.5_p001 = topTable(fit2, coef = 3, adjust.method="BH", p.value = 0.01, number = 6631)
write.csv(topTable9.5_10.5_p001, file = "topTable9.5_10.5_p001.csv")
topTable10.5_12.5_p001 = topTable(fit2, coef = 4, adjust.method="BH", p.value = 0.01, number = 6631)
write.csv(topTable10.5_12.5_p001, file = "topTable10.5_12.5_p001.csv")
topTable12.5_14.5_p001 = topTable(fit2, coef = 5, adjust.method="BH", p.value = 0.01, number = 6631)
write.csv(topTable12.5_14.5_p001, file = "topTable12.5_14.5_p001.csv")
topTable14.5_16.5_p001 = topTable(fit2, coef = 6, adjust.method="BH", p.value = 0.01, number = 6631)
write.csv(topTable14.5_16.5_p001, file = "topTable14.5_16.5_p001.csv")
topTable16.5_18.5_p001 = topTable(fit2, coef = 7, adjust.method="BH", p.value = 0.01, number = 6631)
write.csv(topTable16.5_18.5_p001, file = "topTable16.5_18.5_p001.csv")


# annotating differentialy expressed genes

deg_list_p001 = list(topTable7.5_8.5_p001, topTable8.5_9.5_p001, topTable9.5_10.5_p001, topTable10.5_12.5_p001, topTable12.5_14.5_p001, topTable14.5_16.5_p001, topTable16.5_18.5_p001)
deg_list_p001 = lapply(deg_list_p001, function(x) merge(x, tra_anno, by.x = "AFFY.Mouse430.2.probe", by.y = "AFFY.Mouse430.2.probe", all = FALSE))


#splitting of the list into dataframes

setwd("./annotated")

anno_7.5_8.5_p001 = deg_list_p001[[1]]
anno_7.5_8.5_p001 = anno_7.5_8.5_p001[!duplicated(anno_7.5_8.5_p001$AFFY.Mouse430.2.probe),]
write.csv(anno_7.5_8.5_p001, file = "anno_7.5_8.5_p001.csv")

anno_8.5_9.5_p001 = deg_list_p001[[2]]
anno_8.5_9.5_p001 = anno_8.5_9.5_p001[!duplicated(anno_8.5_9.5_p001$AFFY.Mouse430.2.probe),]
write.csv(anno_8.5_9.5_p001, file = "anno_8.5_9.5_p001.csv")

anno_9.5_10.5_p001 = deg_list_p001[[3]]
anno_9.5_10.5_p001 = anno_9.5_10.5_p001[!duplicated(anno_9.5_10.5_p001$AFFY.Mouse430.2.probe),]
write.csv(anno_9.5_10.5_p001, file = "anno_9.5_10.5_p001.csv")

anno_10.5_12.5_p001 = deg_list_p001[[4]]
anno_10.5_12.5_p001 = anno_10.5_12.5_p001[!duplicated(anno_10.5_12.5_p001$AFFY.Mouse430.2.probe),]
write.csv(anno_10.5_12.5_p001, file = "anno_10.5_12.5_p001.csv")

anno_12.5_14.5_p001 = deg_list_p001[[5]]
anno_12.5_14.5_p001 = anno_12.5_14.5_p001[!duplicated(anno_12.5_14.5_p001$AFFY.Mouse430.2.probe),]
write.csv(anno_12.5_14.5_p001, file = "anno_12.5_14.5_p001.csv")

anno_14.5_16.5_p001 = deg_list_p001[[6]]
anno_14.5_16.5_p001 = anno_14.5_16.5_p001[!duplicated(anno_14.5_16.5_p001$AFFY.Mouse430.2.probe),]
write.csv(anno_14.5_16.5_p001, file = "anno_14.5_16.5_p001.csv")

anno_16.5_18.5_p001 = deg_list_p001[[7]]
anno_16.5_18.5_p001 = anno_16.5_18.5_p001[!duplicated(anno_16.5_18.5_p001$AFFY.Mouse430.2.probe),]
write.csv(anno_16.5_18.5_p001, file = "anno_16.5_18.5_p001.csv")


#barplots 

setwd("./../../../plots/limma_TRAs/Barplots_p001")

degs_barplot_names = c("7.5 and 8.5", "8.5 and 9.5", "9.5 and 10.5", "10.5 and 12.5", "12.5 and 14.5", "14.5 and 16.5", "16.5 and 18.5")
save_degs_barplot_names = c("7.5_8.5", "8.5_9.5", "9.5_10.5", "10.5_12.5", "12.5_14.5", "14.5_16.5", "16.5_18.5")

for (i in 1:length(deg_list_p001)){
  ggplot(data = deg_list_p001[[i]]) +
    geom_bar(mapping = aes(x = max.tissue, fill = max.tissue), show.legend = FALSE) +
    coord_flip() +
    ggtitle(paste("Differentially expressed genes (p=0.001) between", degs_barplot_names[i], sep = " ", collapse= NULL))+
    theme(plot.title = element_text(hjust = 0.5))
  ggsave(paste("barplot_", save_degs_barplot_names[i], "p001.jpeg"), width = 12, height = 10)
}



#############################################
#k-means clustering ----
#############################################

library(ggpubr)

#defining optimal number of clusters using different methods

set.seed(123)
fviz_nbclust(anno_7.5_8.5[,3:4], kmeans, method = "wss") +
  geom_vline(xintercept = 3, linetype =2)+
  labs(subtitle = "Elbow method")


set.seed(123)
fviz_nbclust(anno_7.5_8.5[,3:4], kmeans, nstart = 25, method = "gap_stat", nboot = 50) +
  labs(subtitle = "Gap statistic method")


set.seed(123)
fviz_nbclust(anno_7.5_8.5[,3:4], kmeans, method = "silhouette")+
  labs(subtitle = "Silhouette method")


#vizualisation of k-means clustering

degs_kmeans_names = c("7.5 to 8.5", "8.5 to 9.5", "9.5 to 10.5", "10.5 to 12.5", "12.5 to 14.5", "14.5 to 16.5", "16.5 to 18.5")
save_degs_kmeans_names = c("7.5_8.5", "8.5_9.5", "9.5_10.5", "10.5_12.5", "12.5_14.5", "14.5_16.5", "16.5_18.5")


#p = 0.005

setwd("./../../kmeans/kmeans_p005") 

set.seed(123456)
for (i in 1:length(deg_list)){
  fviz_cluster(kmeans(deg_list[[i]][,2:3], 4, nstart = 25), data = deg_list[[i]][, 2:3],
               geom = "point",
               ellipse = TRUE,
               ellipse.type = "convex",
               main = paste("Cluster plot for day" , degs_kmeans_names[i], sep = " ", collapse= NULL),
               ylab = "Average expression")
  ggsave(paste("Kmeans_" , save_degs_kmeans_names[i], "_p005.png"))
}


#p = 0.001

setwd("./../kmeans_p001") 

set.seed(123456)
for (i in 1:length(deg_list_p001)){
  fviz_cluster(kmeans(deg_list_p001[[i]][,2:3], 4, nstart = 25), data = deg_list_p001[[i]][, 2:3],
               geom = "point",
               ellipse = TRUE,
               ellipse.type = "convex",
               main = paste("Cluster plot for day" , degs_kmeans_names[i], sep = " ", collapse= NULL),
               ylab = "Average expression")
  ggsave(paste("Kmeans_" , save_degs_kmeans_names[i], "_p001.png"))
}



#############################################
#Volcano plot----
#############################################


setwd("./../../volcanoplots/volcanoplots_p005")

for (i in 1:length(deg_list)){
  name = paste("data_", i, sep = "")
  name = deg_list[[i]][,c(16,2,5)]
  colnames(name)=c("Gene.name", "logFC", "P.Value")
  name <- name %>% 
    mutate(
      Expression = case_when(logFC >= log(2) &  P.Value<= 0.05 ~ "Up-regulated",
                             logFC <= -log(2) & P.Value <= 0.05 ~ "Down-regulated",
                             TRUE ~ "Unchanged"))
  name <- name %>% 
    mutate(
      Significance = case_when(
        abs(logFC) >= log(2) & P.Value <= 0.05 & P.Value > 0.01 ~ "P.Value 0.05", 
        abs(logFC) >= log(2) & P.Value <= 0.01 & P.Value > 0.001 ~ "P.Value 0.01",
        abs(logFC) >= log(2) & P.Value <= 0.001 ~ "P.Value 0.001",
        TRUE ~ "Unchanged"))
  top_genes <- bind_rows(
    name %>% 
      filter(Expression == 'Up-regulated') %>% 
      arrange(P.Value, desc(abs(logFC))) %>% 
      head(10),
    name %>% 
      filter(Expression == 'Down-regulated') %>% 
      arrange(P.Value, desc(abs(logFC))) %>% 
      head(10))
  ggplot(name, aes(logFC, -log(P.Value,10))) +
    geom_point(aes(color = Significance), size = 2/5) +
    ggtitle(paste("Volcano plots for", degs_kmeans_names[i], ))
  xlab(expression("log"[2]*"FC")) + 
    ylab(expression("-log"[10]*"P.Value")) +
    scale_color_viridis_d() +
    guides(colour = guide_legend(override.aes = list(size=1.5))) +
    geom_label_repel(data = top_genes,
                     mapping = aes(logFC, -log(P.Value,10), label = Gene.name),
                     size = 2)
  ggsave(paste("Volcanoplot_", save_degs_kmeans_names[i], "_p005.png"))
}

data_x = c("data_1", "data_2", "data_3", "data_4", "data_5", "data_6", "data_7")



#############################################
#Chemokines ----
#############################################

#create chemokines annotation table

library(readr)
setwd("./../../../raw_data")

anno_chem = read_table("mart_export_chemokines.txt")

setwd("./../tables")
chemokines = grep("chemokine",anno_chem$Gene.description)
anno_chem = anno_chem[chemokines,]
anno_chem = as.data.frame(anno_chem)
write.csv(anno_chem, file = "anno_chem.csv")



#############################################
#Annotating Chemokines----
#############################################


chem_data = merge(eset, anno_chem, by.x = 0, by.y = "AFFY.Mouse430.2.probe", all = FALSE)
colnames(chem_data)[1] = "AFFY.Mouse430.2.probe"
chem_data = chem_data[!duplicated(chem_data$AFFY.Mouse430.2.probe),]
rownames(chem_data) = chem_data$AFFY.Mouse430.2.probe
chem_data = chem_data[ -c(1) ]
write.csv(chem_data, file = "chem_data.csv")


#Differential expression

#GSM701716 	[E-MTAB-368] Mouse developmental stage E7.5 1
#GSM701717 	[E-MTAB-368] Mouse developmental stage E7.5 2
#GSM701718 	[E-MTAB-368] Mouse developmental stage E7.5 3
#GSM701719 	[E-MTAB-368] Mouse developmental stage E8.5 1
#GSM701720 	[E-MTAB-368] Mouse developmental stage E8.5 2
#GSM701721 	[E-MTAB-368] Mouse developmental stage E8.5 3
#GSM701722 	[E-MTAB-368] Mouse developmental stage E9.5 1
#GSM701723 	[E-MTAB-368] Mouse developmental stage E9.5 2
#GSM701724 	[E-MTAB-368] Mouse developmental stage E9.5 3
#GSM701725 	[E-MTAB-368] Mouse developmental stage E10.5 1
#GSM701726 	[E-MTAB-368] Mouse developmental stage E10.5 2
#GSM701727 	[E-MTAB-368] Mouse developmental stage E10.5 3
#GSM701728 	[E-MTAB-368] Mouse developmental stage E12.5 1
#GSM701729 	[E-MTAB-368] Mouse developmental stage E12.5 2
#GSM701730 	[E-MTAB-368] Mouse developmental stage E14.5 1
#GSM701731 	[E-MTAB-368] Mouse developmental stage E14.5 2
#GSM701732 	[E-MTAB-368] Mouse developmental stage E16.5 1
#GSM701733 	[E-MTAB-368] Mouse developmental stage E16.5 2
#GSM701734 	[E-MTAB-368] Mouse developmental stage E18.5 1
#GSM701735 	[E-MTAB-368] Mouse developmental stage E18.5 2

chem_data_not_anno = chem_data[,1:20]


# creating design matrices

design = model.matrix(~ 0+factor(c(1,1,1,2,2,2,3,3,3,4,4,4,5,5,6,6,7,7,8,8)))
colnames(design) = c("Day_7.5", "Day_8.5", "Day_9.5", "Day_10.5", "Day_12.5", "Day_14.5", "Day_16.5", "Day_18.5")
fit_chem = lmFit(chem_data_not_anno, design) #Fit linear model for each gene given a series of arrays

# making pairwise comparisons

contrast.matrix_chem = makeContrasts(Day_7.5-Day_8.5, Day_8.5-Day_9.5, Day_9.5-Day_10.5, Day_10.5-Day_12.5, Day_12.5-Day_14.5, Day_14.5-Day_16.5, Day_16.5-Day_18.5, levels = design)
fit2_chem = contrasts.fit(fit_chem, contrast.matrix_chem)
fit2_chem = eBayes(fit2_chem)



#############################################
#limma for Chemokines p=0.05 ----
#############################################

#extracting a list of top expressed genes
#create a table of top genes from linear model fit via topTable

setwd("./limma_chemokines_p005")
topTable_chem_7.5_8.5 = topTable(fit2_chem, coef = 1, adjust.method="BH", p.value = 0.05, number = 6631) #104 for chem
write.csv(topTable_chem_7.5_8.5, file = "topTable_chem_7.5_8.5.csv")
topTable_chem_8.5_9.5 = topTable(fit2_chem, coef = 2, adjust.method="BH", p.value = 0.05, number = 6631)
write.csv(topTable_chem_8.5_9.5, file = "topTable_chem_8.5_9.5.csv")
topTable_chem_9.5_10.5 = topTable(fit2_chem, coef = 3, adjust.method="BH", p.value = 0.05, number = 6631)
write.csv(topTable_chem_9.5_10.5, file = "topTable_chem_9.5_10.5.csv")
topTable_chem_10.5_12.5 = topTable(fit2_chem, coef = 4, adjust.method="BH", p.value = 0.05, number = 6631)
write.csv(topTable_chem_10.5_12.5, file = "topTable_chem_10.5_12.5.csv")
topTable_chem_12.5_14.5 = topTable(fit2_chem, coef = 5, adjust.method="BH", p.value = 0.05, number = 6631)
write.csv(topTable_chem_12.5_14.5, file = "topTable_chem_12.5_14.5.csv")
topTable_chem_14.5_16.5 = topTable(fit2_chem, coef = 6, adjust.method="BH", p.value = 0.05, number = 6631)
write.csv(topTable_chem_14.5_16.5, file = "topTable_chem_14.5_16.5.csv")
topTable_chem_16.5_18.5 = topTable(fit2_chem, coef = 7, adjust.method="BH", p.value = 0.05, number = 6631)
write.csv(topTable_chem_16.5_18.5, file = "topTable_chem_16.5_18.5.csv")


# annotating differentially expressed genes

deg_list_chem = list(topTable_chem_7.5_8.5, topTable_chem_8.5_9.5, topTable_chem_9.5_10.5, topTable_chem_10.5_12.5, topTable_chem_12.5_14.5, topTable_chem_14.5_16.5, topTable_chem_16.5_18.5)
deg_list_chem = lapply(deg_list_chem, function(x) merge(x, anno_chem, by.x = "row.names", by.y = "AFFY.Mouse430.2.probe", all = FALSE))

setwd("./annotated")

#splitting of the list into dataframes

anno_chem_7.5_8.5 = deg_list_chem[[1]]
anno_chem_7.5_8.5 = anno_chem_7.5_8.5[!duplicated(anno_chem_7.5_8.5$Row.names),]
write.csv(anno_chem_7.5_8.5, file = "anno_chem_7.5_8.5.csv")

anno_chem_8.5_9.5 = deg_list_chem[[2]]
anno_chem_8.5_9.5 = anno_chem_8.5_9.5[!duplicated(anno_chem_8.5_9.5$Row.names),]
write.csv(anno_chem_8.5_9.5, file = "anno_chem_8.5_9.5.csv")

anno_chem_9.5_10.5 = deg_list_chem[[3]]
anno_chem_9.5_10.5 = anno_chem_9.5_10.5[!duplicated(anno_chem_9.5_10.5$Row.names),]
write.csv(anno_chem_9.5_10.5, file = "anno_chem_9.5_10.5.csv")

anno_chem_10.5_12.5 = deg_list_chem[[4]]
anno_chem_10.5_12.5 = anno_chem_10.5_12.5[!duplicated(anno_chem_10.5_12.5$Row.names),]
write.csv(anno_chem_10.5_12.5, file = "anno_chem_10.5_12.5.csv")

anno_chem_12.5_14.5 = deg_list_chem[[5]]
anno_chem_12.5_14.5 = anno_chem_12.5_14.5[!duplicated(anno_chem_12.5_14.5$Row.names),]
write.csv(anno_chem_12.5_14.5, file = "anno_chem_12.5_14.5.csv")

anno_chem_14.5_16.5 = deg_list_chem[[6]]
anno_chem_14.5_16.5 = anno_chem_14.5_16.5[!duplicated(anno_chem_14.5_16.5$Row.names),]
write.csv(anno_chem_14.5_16.5, file = "anno_chem_14.5_16.5.csv")

anno_chem_16.5_18.5 = deg_list_chem[[7]]
anno_chem_16.5_18.5 = anno_chem_16.5_18.5[!duplicated(anno_chem_16.5_18.5$Row.names),]
write.csv(anno_chem_16.5_18.5, file = "anno_chem_16.5_18.5.csv")


#############################################
#limma for Chemokines p=0.01 ----
#############################################


#extracting a list of top expressed genes
#create a table of top genes from linear model fit via topTable

setwd("./../../limma_chemokines_p001")

topTable_chem_7.5_8.5_p001 = topTable(fit2_chem, coef = 1, adjust.method="BH", p.value = 0.01, number = 6631) 
write.csv(topTable_chem_7.5_8.5_p001, file = "topTable_chem_7.5_8.5_p001.csv")
topTable_chem_8.5_9.5_p001 = topTable(fit2_chem, coef = 2, adjust.method="BH", p.value = 0.01, number = 6631)
write.csv(topTable_chem_8.5_9.5_p001, file = "topTable_chem_8.5_9.5_p001.csv")
topTable_chem_9.5_10.5_p001 = topTable(fit2_chem, coef = 3, adjust.method="BH", p.value = 0.01, number = 6631)
write.csv(topTable_chem_9.5_10.5_p001, file = "topTable_chem_9.5_10.5_p001.csv")
topTable_chem_10.5_12.5_p001 = topTable(fit2_chem, coef = 4, adjust.method="BH", p.value = 0.01, number = 6631)
write.csv(topTable_chem_10.5_12.5_p001, file = "topTable_chem_10.5_12.5_p001.csv")
topTable_chem_12.5_14.5_p001 = topTable(fit2_chem, coef = 5, adjust.method="BH", p.value = 0.01, number = 6631)
write.csv(topTable_chem_12.5_14.5_p001, file = "topTable_chem_12.5_14.5_p001.csv")
topTable_chem_14.5_16.5_p001 = topTable(fit2_chem, coef = 6, adjust.method="BH", p.value = 0.01, number = 6631)
write.csv(topTable_chem_14.5_16.5_p001, file = "topTable_chem_14.5_16.5_p001.csv")
topTable_chem_16.5_18.5_p001 = topTable(fit2_chem, coef = 7, adjust.method="BH", p.value = 0.01, number = 6631)
write.csv(topTable_chem_16.5_18.5_p001, file = "topTable_chem_16.5_18.5_p001.csv")


# annotating differentially expressed genes

deg_list_chem_p001 = list(topTable_chem_7.5_8.5_p001, topTable_chem_8.5_9.5_p001, topTable_chem_9.5_10.5_p001, topTable_chem_10.5_12.5_p001, topTable_chem_12.5_14.5_p001, topTable_chem_14.5_16.5_p001, topTable_chem_16.5_18.5_p001)
deg_list_chem_p001 = lapply(deg_list_chem_p001, function(x) merge(x, anno_chem, by.x = "row.names", by.y = "AFFY.Mouse430.2.probe", all = FALSE))

setwd("./annotated")

#splitting of the list into dataframes

anno_chem_7.5_8.5_p001 = deg_list_chem_p001[[1]]
anno_chem_7.5_8.5_p001 = anno_chem_7.5_8.5_p001[!duplicated(anno_chem_7.5_8.5_p001$Row.names),]
write.csv(anno_chem_7.5_8.5_p001, file = "anno_chem_7.5_8.5_p001.csv")

anno_chem_8.5_9.5_p001 = deg_list_chem_p001[[2]]
anno_chem_8.5_9.5_p001 = anno_chem_8.5_9.5_p001[!duplicated(anno_chem_8.5_9.5_p001$Row.names),]
write.csv(anno_chem_8.5_9.5_p001, file = "anno_chem_8.5_9.5_p001.csv")

anno_chem_9.5_10.5_p001 = deg_list_chem_p001[[3]]
anno_chem_9.5_10.5_p001 = anno_chem_9.5_10.5_p001[!duplicated(anno_chem_9.5_10.5_p001$Row.names),]
write.csv(anno_chem_9.5_10.5_p001, file = "anno_chem_9.5_10.5_p001.csv")

anno_chem_10.5_12.5_p001 = deg_list_chem_p001[[4]]
anno_chem_10.5_12.5_p001 = anno_chem_10.5_12.5_p001[!duplicated(anno_chem_10.5_12.5_p001$Row.names),]
write.csv(anno_chem_10.5_12.5_p001, file = "anno_chem_10.5_12.5_p001.csv")

anno_chem_12.5_14.5_p001 = deg_list_chem_p001[[5]]
anno_chem_12.5_14.5_p001 = anno_chem_12.5_14.5_p001[!duplicated(anno_chem_12.5_14.5_p001$Row.names),]
write.csv(anno_chem_12.5_14.5_p001, file = "anno_chem_12.5_14.5_p001.csv")

anno_chem_14.5_16.5_p001 = deg_list_chem_p001[[6]]
anno_chem_14.5_16.5_p001 = anno_chem_14.5_16.5_p001[!duplicated(anno_chem_14.5_16.5_p001$Row.names),]
write.csv(anno_chem_14.5_16.5_p001, file = "anno_chem_14.5_16.5_p001.csv")

anno_chem_16.5_18.5_p001 = deg_list_chem_p001[[7]]
anno_chem_16.5_18.5_p001 = anno_chem_16.5_18.5_p001[!duplicated(anno_chem_16.5_18.5_p001$Row.names),]
write.csv(anno_chem_16.5_18.5_p001, file = "anno_chem_16.5_18.5_p001.csv")



#############################################
#PCA for Chemokines----
#############################################


library("limma")
library("Biobase")
library("tidyverse")
library("EMCluster")
library("BAMMtools")


chem_data2.pca <- prcomp(t(chem_data [,1:20]), center = TRUE, scale = TRUE)
chem_data2.pca_unlist = unlist(chem_data2.pca)

# Inspect new PCA object and its variation accounting
chem_data2.pca.varprop <- chem_data2.pca %>% summary() %>% pluck("importance")
chem_data2.pca.varprop[c(1,2), ]

# Plot the PCAs against each other until PC13 which includes 95% of the variance

setwd("./../../../plots/PCA/PCA_chemokines")


autoplot(chem_data2.pca, label = FALSE, label.size = 2.5, ylim = c(-0.4, 0.4), xlim = c(-0.4, 0.5))+
  aes(color = Days, legend = FALSE) +
  ggtitle("Chemokines PCA")+
  theme(plot.title = element_text(hjust = 0.5))

dev.copy2pdf(file="chem_PCA_no_labels.pdf")


#PC1 v PC2
pca_chem.fig <- ggplot(chem_data2.pca$x %>% as.data.frame()) + 
  geom_point(aes(x = PC1, y = PC2)) +
  ggtitle("Chemokine PCA") +
  theme(plot.title = element_text(hjust = 0.5))+
  aes(color = Days, legend = FALSE)

pca_chem.fig

dev.copy2pdf(file="Chem_PCA.pdf")


#PC2 v PC3
pca_chem_2v3.fig <- ggplot(chem_data2.pca$x %>% as.data.frame()) + 
  geom_point(aes(x = PC2, y = PC3)) +
  ggtitle("Chemokine PC2 vs. PC3 PCA") +
  theme(plot.title = element_text(hjust = 0.5))+
  aes(color = Days, legend = FALSE)

pca_chem_2v3.fig

dev.copy2pdf(file="Chem_PCA_2v3.pdf")


#PC3 v PC4
pca_chem_3v4.fig <- ggplot(chem_data2.pca$x %>% as.data.frame()) + 
  geom_point(aes(x = PC3, y = PC4)) +
  ggtitle("Chemokine PC3 vs. PC4 PCA") +
  theme(plot.title = element_text(hjust = 0.5))+
  aes(color = Days, legend = FALSE)

pca_chem_3v4.fig

dev.copy2pdf(file="Chem_PCA_3v4.pdf")


#PC4 v PC5
pca_chem_4v5.fig <- ggplot(chem_data2.pca$x %>% as.data.frame()) + 
  geom_point(aes(x = PC4, y = PC5)) +
  ggtitle("Chemokine PC4 vs. PC5 PCA") +
  theme(plot.title = element_text(hjust = 0.5))+
  aes(color = Days, legend = FALSE)

pca_chem_4v5.fig

dev.copy2pdf(file="Chem_PCA_4v5.pdf")


#PC5 v PC6
pca_chem_5v6.fig <- ggplot(chem_data2.pca$x %>% as.data.frame()) + 
  geom_point(aes(x = PC5, y = PC6)) +
  ggtitle("Chemokine PC5 vs. PC6 PCA") +
  theme(plot.title = element_text(hjust = 0.5))+
  aes(color = Days, legend = FALSE)

pca_chem_5v6.fig

dev.copy2pdf(file="Chem_PCA_5v6.pdf")


#PC6 v PC7
pca_chem_6v7.fig <- ggplot(chem_data2.pca$x %>% as.data.frame()) + 
  geom_point(aes(x = PC6, y = PC7)) +
  ggtitle("Chemokine PC6 vs. PC7 PCA")+
  theme(plot.title = element_text(hjust = 0.5))+
  aes(color = Days, legend = FALSE)

pca_chem_6v7.fig

dev.copy2pdf(file="Chem_PCA_6v7.pdf")


#PC7 v PC8
pca_chem_7v8.fig <- ggplot(chem_data2.pca$x %>% as.data.frame()) + 
  geom_point(aes(x = PC7, y = PC8)) +
  ggtitle("Chemokine PC7 vs. PC8 PCA")+
  theme(plot.title = element_text(hjust = 0.5))+
  aes(color = Days, legend = FALSE)

pca_chem_7v8.fig

dev.copy2pdf(file="Chem_PCA_7v8.pdf")


#PC8 v PC9
pca_chem_8v9.fig <- ggplot(chem_data2.pca$x %>% as.data.frame()) + 
  geom_point(aes(x = PC8, y = PC9)) +
  ggtitle("Chemokine PC8 vs. PC9 PCA")+
  theme(plot.title = element_text(hjust = 0.5))+
  aes(color = Days, legend = FALSE)

pca_chem_8v9.fig

dev.copy2pdf(file="Chem_PCA_8v9.pdf")


#PC9 v PC10
pca_chem_9v10.fig <- ggplot(chem_data2.pca$x %>% as.data.frame()) + 
  geom_point(aes(x = PC9, y = PC10)) +
  ggtitle("Chemokine PC9 vs. PC10 PCA") +
  theme(plot.title = element_text(hjust = 0.5))+
  aes(color = Days, legend = FALSE)

pca_chem_9v10.fig

dev.copy2pdf(file="Chem_PCA_9v10.pdf")

#PC10 v PC11
pca_chem_10v11.fig <- ggplot(chem_data2.pca$x %>% as.data.frame()) + 
  geom_point(aes(x = PC10, y = PC11)) +
  ggtitle("Chemokine PC10 vs. PC11 PCA") +
  theme(plot.title = element_text(hjust = 0.5))+
  aes(color = Days, legend = FALSE)

pca_chem_10v11.fig

dev.copy2pdf(file="Chem_PCA_10v11.pdf")

#PC11 v PC12
pca_chem_11v12.fig <- ggplot(chem_data2.pca$x %>% as.data.frame()) + 
  geom_point(aes(x = PC11, y = PC12)) +
  ggtitle("Chemokine PC11 vs. PC12 PCA") +
  theme(plot.title = element_text(hjust = 0.5))+
  aes(color = Days, legend = FALSE)

pca_chem_11v12.fig

dev.copy2pdf(file="Chem_PCA_11v12.pdf")

#PC12 v PC13
pca_chem_12v13.fig <- ggplot(chem_data2.pca$x %>% as.data.frame()) + 
  geom_point(aes(x = PC12, y = PC13)) +
  ggtitle("Chemokine PC12 vs. PC13 PCA") +
  theme(plot.title = element_text(hjust = 0.5))+
  aes(color = Days, legend = FALSE)

pca_chem_12v13.fig

dev.copy2pdf(file="Chem_PCA_12v13.pdf")




#############################################
#Gene set enrichment analysis
#############################################


BiocManager::install("org.Mm.eg.db")
BiocManager::install("clusterProfiler")
BiocManager::install("enrichplot")

library(clusterProfiler)
library(enrichplot)
library(org.Mm.eg.db)
library(DOSE)

setwd("./../../GSEA")

gsea_tra_7.5_8.5 = anno_7.5_8.5$logFC
names(gsea_tra_7.5_8.5) = anno_7.5_8.5$entrezID
gsea_tra_7.5_8.5 = na.omit(gsea_tra_7.5_8.5)
gsea_tra_7.5_8.5 = sort(gsea_tra_7.5_8.5, decreasing = TRUE)

gsea_tra_8.5_9.5 = anno_8.5_9.5$logFC
names(gsea_tra_8.5_9.5) = anno_8.5_9.5$entrezID
gsea_tra_8.5_9.5 = na.omit(gsea_tra_8.5_9.5)
gsea_tra_8.5_9.5 = sort(gsea_tra_8.5_9.5, decreasing = TRUE)

gsea_tra_9.5_10.5 = anno_9.5_10.5$logFC
names(gsea_tra_9.5_10.5) = anno_9.5_10.5$entrezID
gsea_tra_9.5_10.5 = na.omit(gsea_tra_9.5_10.5)
gsea_tra_9.5_10.5 = sort(gsea_tra_9.5_10.5, decreasing = TRUE)

gsea_tra_10.5_12.5 = anno_10.5_12.5$logFC
names(gsea_tra_10.5_12.5) = anno_10.5_12.5$entrezID
gsea_tra_10.5_12.5 = na.omit(gsea_tra_10.5_12.5)
gsea_tra_10.5_12.5 = sort(gsea_tra_10.5_12.5, decreasing = TRUE)

gsea_tra_12.5_14.5 = anno_12.5_14.5$logFC
names(gsea_tra_12.5_14.5) = anno_12.5_14.5$entrezID
gsea_tra_12.5_14.5 = na.omit(gsea_tra_12.5_14.5)
gsea_tra_12.5_14.5 = sort(gsea_tra_12.5_14.5, decreasing = TRUE)

gsea_tra_14.5_16.5 = anno_14.5_16.5$logFC
names(gsea_tra_14.5_16.5) = anno_14.5_16.5$entrezID
gsea_tra_14.5_16.5 = na.omit(gsea_tra_14.5_16.5)
gsea_tra_14.5_16.5 = sort(gsea_tra_14.5_16.5, decreasing = TRUE)

gsea_tra_16.5_18.5 = anno_16.5_18.5$logFC
names(gsea_tra_16.5_18.5) = anno_16.5_18.5$entrezID
gsea_tra_16.5_18.5 = na.omit(gsea_tra_16.5_18.5)
gsea_tra_16.5_18.5 = sort(gsea_tra_16.5_18.5, decreasing = TRUE)


#GSEA dotplots with 20 categories

gse_1_20 = gseGO(geneList = gsea_tra_7.5_8.5,
                 ont = "BP",
                 keyType = "ENTREZID",
                 maxGSSize = 2000,
                 verbose = TRUE,
                 OrgDb = "org.Mm.eg.db",
                 pAdjustMethod = "none")
dotplot(gse_1_20, showCategory = 20, split = ".sign") +
  facet_grid(.~.sign) +
  labs(title = "Gene set enrichment analysis day 7.5 to day 8.5")
ggsave("GSEA_7.5_8.5_20_Dotplot.jpeg", height = 18, width = 18)


gse_2_20 = gseGO(geneList = gsea_tra_8.5_9.5,
                 ont = "BP",
                 keyType = "ENTREZID",
                 maxGSSize = 2000,
                 verbose = TRUE,
                 OrgDb = "org.Mm.eg.db",
                 pAdjustMethod = "none")
dotplot(gse_2_20, showCategory = 20, split = ".sign") +
  facet_grid(.~.sign) +
  labs(title = "Gene set enrichment analysis day 8.5 to day 9.5")
ggsave("GSEA_8.5_9.5_20_Dotplot.jpeg", height = 18, width = 18)


gse_3_20 = gseGO(geneList = gsea_tra_9.5_10.5,
                 ont = "BP",
                 keyType = "ENTREZID",
                 maxGSSize = 2000,
                 verbose = TRUE,
                 OrgDb = "org.Mm.eg.db",
                 pAdjustMethod = "none")
dotplot(gse_3_20, showCategory = 20, split = ".sign") +
  facet_grid(.~.sign) +
  labs(title = "Gene set enrichment analysis day 9.5 to day 10.5")
ggsave("GSEA_9.5_10.5_20_Dotplot.jpeg", height = 18, width = 18)



gse_4_20 = gseGO(geneList = gsea_tra_10.5_12.5,
                 ont = "BP",
                 keyType = "ENTREZID",
                 maxGSSize = 2000,
                 verbose = TRUE,
                 OrgDb = "org.Mm.eg.db",
                 pAdjustMethod = "none")
dotplot(gse_4_20, showCategory = 20, split = ".sign") +
  facet_grid(.~.sign) +
  labs(title = "Gene set enrichment analysis day 10.5 to day 12.5")
ggsave("GSEA_10.5_12.5_20_Dotplot.jpeg", height = 18, width = 18)


gse_5_20 = gseGO(geneList = gsea_tra_12.5_14.5,
                 ont = "BP",
                 keyType = "ENTREZID",
                 maxGSSize = 2000,
                 verbose = TRUE,
                 OrgDb = "org.Mm.eg.db",
                 pAdjustMethod = "none")
dotplot(gse_5_20, showCategory = 20, split = ".sign") +
  facet_grid(.~.sign) +
  labs(title = "Gene set enrichment analysis day 12.5 to day 14.5")
ggsave("GSEA_12.5_14.5_20_Dotplot.jpeg", height = 18, width = 18)


gse_6_20 = gseGO(geneList = gsea_tra_14.5_16.5,
                 ont = "BP",
                 keyType = "ENTREZID",
                 maxGSSize = 2000,
                 verbose = TRUE,
                 OrgDb = "org.Mm.eg.db",
                 pAdjustMethod = "none")
dotplot(gse_6_20, showCategory = 20, split = ".sign") +
  facet_grid(.~.sign) +
  labs(title = "Gene set enrichment analysis day 14.5 to day 16.5")
ggsave("GSEA_14.5_16.5_20_Dotplot.jpeg", height = 18, width = 18)


gse_7_20 = gseGO(geneList = gsea_tra_16.5_18.5,
                 ont = "BP",
                 keyType = "ENTREZID",
                 maxGSSize = 2000,
                 verbose = TRUE,
                 OrgDb = "org.Mm.eg.db",
                 pAdjustMethod = "none")
dotplot(gse_7_20, showCategory = 20, split = ".sign") +
  facet_grid(.~.sign) +
  labs(title = "Gene set enrichment analysis day 16.5 to day 18.5")
ggsave("GSEA_16.5_18.5_20_Dotplot.jpeg", height = 18, width = 18)



#############################################
#Venn diagrams ----
#############################################

library(ggVennDiagram)

setwd("./../venndiagrams")

#venn diagram of all up-regulated TRAs

venn_names_up = c("day 7 to 8 (896)", "day 8 to 9 (340)", "day 9 to 10 (263)", "day 10 to 12 (1077)", "day 12 to 14 (239)", "day 14 to 16 (350)", "day 16 to 18 (350)")

list_tra_up = list(anno_7.5_8.5[anno_7.5_8.5$logFC > 0, 3], anno_8.5_9.5[anno_8.5_9.5$logFC > 0, 3], anno_9.5_10.5[anno_9.5_10.5$logFC > 0, 3], anno_10.5_12.5[anno_10.5_12.5$logFC > 0, 3], anno_12.5_14.5[anno_12.5_14.5$logFC > 0, 3], anno_14.5_16.5[anno_14.5_16.5$logFC > 0, 3], anno_16.5_18.5[anno_16.5_18.5 > 0, 3])
list_tra_up = lapply(list_tra_up, na.omit)
list_tra_down = list(anno_7.5_8.5[anno_7.5_8.5$logFC < 0, 3], anno_8.5_9.5[anno_8.5_9.5$logFC < 0, 3], anno_9.5_10.5[anno_9.5_10.5$logFC < 0, 3], anno_10.5_12.5[anno_10.5_12.5$logFC < 0, 3], anno_12.5_14.5[anno_12.5_14.5$logFC < 0, 3], anno_14.5_16.5[anno_14.5_16.5$logFC < 0, 3], anno_16.5_18.5[anno_16.5_18.5 > 0, 3])
list_tra_down = lapply(list_tra_down, na.omit)

ggVennDiagram(list_tra_up,
              category.names = venn_names_up,
              label_alpha = 0
) +
  ggtitle("All up-regulated genes")+
  theme(plot.title = element_text(hjust = 0.5))+
  ggplot2::scale_fill_gradient(low = "blue", high = "yellow")
ggsave("venn_diagram_all_tras_up.jpeg", width = 12, height = 10)
ggsave("venn_diagram_all_tras_up.pdf", width = 12, height = 10)


#venn diagram of all down-regulated TRAs 

venn_names_down = c("day 7 to 8 (1046)", "day 8 to 9 (474)", "day 9 to 10 (665)", "day 10 to 12 (1063)", "day 12 to 14 (644)", "day 14 to 16 (558)", "day 16 to 18 (1398)")

ggVennDiagram(list_tra_down,
              category.names = venn_names_down,
              label_alpha = 0
) +
  ggtitle("All down-regulated genes")+
  theme(plot.title = element_text(hjust = 0.5))+
  ggplot2::scale_fill_gradient(low = "blue", high = "yellow")
ggsave("venn_diagram_all_tras_down.jpeg", width = 12, height = 10)
ggsave("venn_diagram_all_tras_down.pdf", width = 12, height = 10)


#--------------------------------
#venn diagrams of chemokine genes
#--------------------------------


#venn diagram of all up-regulated chemokines genes

list_chem_up = list(anno_chem_7.5_8.5[anno_chem_7.5_8.5$logFC > 0, 2], anno_chem_8.5_9.5[anno_chem_8.5_9.5$logFC > 0, 2], anno_chem_9.5_10.5[anno_chem_9.5_10.5$logFC > 0, 2], anno_chem_10.5_12.5[anno_chem_10.5_12.5$logFC > 0, 2], anno_chem_12.5_14.5[anno_chem_12.5_14.5$logFC > 0, 2], anno_chem_14.5_16.5[anno_chem_14.5_16.5$logFC > 0, 2], anno_chem_16.5_18.5[anno_chem_16.5_18.5$logFC > 0, 2])
list_chem_up = lapply(list_chem_up, na.omit)
list_chem_down = list(anno_chem_7.5_8.5[anno_chem_7.5_8.5$logFC < 0, 2], anno_chem_8.5_9.5[anno_chem_8.5_9.5$logFC < 0, 2], anno_chem_9.5_10.5[anno_chem_9.5_10.5$logFC < 0, 2], anno_chem_10.5_12.5[anno_chem_10.5_12.5$logFC < 0, 2], anno_chem_12.5_14.5[anno_chem_12.5_14.5$logFC < 0, 2], anno_chem_14.5_16.5[anno_chem_14.5_16.5$logFC < 0, 2], anno_chem_16.5_18.5[anno_chem_16.5_18.5$logFC < 0, 2])
list_chem_down = lapply(list_chem_down, na.omit)

venn_names_chem_up = c("day 7 to 8 (5)", "day 8 to 9 (0)", "day 9 to 10 (1)", "day 10 to 12 (2)", "day 12 to 14 (4)", "day 14 to 16 (3)", "day 16 to 18 (3)")

ggVennDiagram(list_chem_up,
              category.names = venn_names_chem_up,
              label_alpha = 0
) +
  ggtitle("All up-regulated chemokine genes")+
  theme(plot.title = element_text(hjust = 0.5))+
  ggplot2::scale_fill_gradient(low = "blue", high = "yellow")
ggsave("venn_diagram_all_chem_up.jpeg", width = 12, height = 10)
ggsave("venn_diagram_all_chem_up.pdf", width = 12, height = 10)


#venn diagram of all down-regulated chemokine genes

venn_names_chem_down = c("day 7 to 8 (6)", "day 8 to 9 (5)", "day 9 to 10 (9)", "day 10 to 12 (13)", "day 12 to 14 (12)", "day 14 to 16 (9)", "day 16 to 18 (9)")

ggVennDiagram(list_chem_down,
              category.names = venn_names_chem_down,
              label_alpha = 0
) +
  ggtitle("All down-regulated chemokine genes")+
  theme(plot.title = element_text(hjust = 0.5))+
  ggplot2::scale_fill_gradient(low = "blue", high = "yellow")
ggsave("venn_diagram_all_chem_down.jpeg", width = 12, height = 10)
ggsave("venn_diagram_all_chem_down.pdf", width = 12, height = 10)





#############################################
#chemokines expression over time----
#############################################

setwd("./../time_plots")

all_deg_chem = c(which(chem_data$AFFY.Mouse430.2.probe %in% anno_chem_7.5_8.5_p001$Row.names), # select differentially expressed chemokines in the dataframe
                 which(chem_data$AFFY.Mouse430.2.probe %in% anno_chem_8.5_9.5_p001$Row.names),
                 which(chem_data$AFFY.Mouse430.2.probe %in% anno_chem_9.5_10.5_p001$Row.names),
                 which(chem_data$AFFY.Mouse430.2.probe %in% anno_chem_10.5_12.5_p001$Row.names),
                 which(chem_data$AFFY.Mouse430.2.probe %in% anno_chem_12.5_14.5_p001$Row.names),
                 which(chem_data$AFFY.Mouse430.2.probe %in% anno_chem_14.5_16.5_p001$Row.names),
                 which(chem_data$AFFY.Mouse430.2.probe %in% anno_chem_16.5_18.5_p001$Row.names)
)

deg_chem_data = chem_data[all_deg_chem, ]
deg_chem_data = deg_chem_data[!duplicated(deg_chem_data$MGI.symbol),]
  
df = data.frame(deg_chem_data$MGI.symbol,
                rowMeans(deg_chem_data[,2:4]),
                rowMeans(deg_chem_data[,5:7]), 
                rowMeans(deg_chem_data[,8:10]),
                rowMeans(deg_chem_data[,11:13]),
                rowMeans(deg_chem_data[,14:15]),
                rowMeans(deg_chem_data[,16:17]),
                rowMeans(deg_chem_data[,18:19]),
                rowMeans(deg_chem_data[,20:21])
)

colnames(df) = c("X", "7.5", "8.5", "9.5", "10.5", "12.5", "14.5", "16.6", "18.5")

library(reshape2)
deg_chem_long = melt(df, id.vars = "X")



ggplot(data = deg_chem_long, aes(x = variable, y = value)) +
  geom_point(color = "orange") + 
  facet_wrap(~ X , nrow = 3) + 
  labs(x = "days of embryogenesis", y = "expression", title = "Chemokines expression through embryogenesis") 
ggsave("Chemokines expression through embryogenesis.jpeg", height =8, width = 16)




#############################################
#TRA expression over time----
#############################################

#picking 5 most differentially expressed genes from each phase

anno_7.5_8.5_p001 = anno_7.5_8.5_p001[order(abs(anno_7.5_8.5_p001$logFC), decreasing = TRUE),]
top5_anno_7.5_8.5_p001 = anno_7.5_8.5_p001[1:5,]
anno_8.5_9.5_p001 = anno_8.5_9.5_p001[order(abs(anno_8.5_9.5_p001$logFC), decreasing = TRUE),]
top5_anno_8.5_9.5_p001 = anno_8.5_9.5_p001[1:5,]
anno_9.5_10.5_p001 = anno_9.5_10.5_p001[order(abs(anno_9.5_10.5_p001$logFC), decreasing = TRUE),]
top5_anno_9.5_10.5_p001 = anno_9.5_10.5_p001[1:5,]
anno_10.5_12.5_p001 = anno_10.5_12.5_p001[order(abs(anno_10.5_12.5_p001$logFC), decreasing = TRUE),]
top5_anno_10.5_12.5_p001 = anno_10.5_12.5_p001[1:5,]
anno_12.5_14.5_p001 = anno_12.5_14.5_p001[order(abs(anno_12.5_14.5_p001$logFC), decreasing = TRUE),]
top5_anno_12.5_14.5_p001 = anno_12.5_14.5_p001[1:5,]
anno_14.5_16.5_p001 = anno_14.5_16.5_p001[order(abs(anno_14.5_16.5_p001$logFC), decreasing = TRUE),]
top5_anno_14.5_16.5_p001 = anno_14.5_16.5_p001[1:5,]
anno_16.5_18.5_p001 = anno_16.5_18.5_p001[order(abs(anno_16.5_18.5_p001$logFC), decreasing = TRUE),]
top5_anno_16.5_18.5_p001 = anno_16.5_18.5_p001[1:5,]


all_deg_tra = c(which(tra_data$AFFY.Mouse430.2.probe %in% top5_anno_7.5_8.5_p001$AFFY.Mouse430.2.probe), # select differentially expressed chemokines in the dataframe
                which(tra_data$AFFY.Mouse430.2.probe %in% top5_anno_8.5_9.5_p001$AFFY.Mouse430.2.probe),
                which(tra_data$AFFY.Mouse430.2.probe %in% top5_anno_9.5_10.5_p001$AFFY.Mouse430.2.probe),
                which(tra_data$AFFY.Mouse430.2.probe %in% top5_anno_10.5_12.5_p001$AFFY.Mouse430.2.probe),
                which(tra_data$AFFY.Mouse430.2.probe %in% top5_anno_12.5_14.5_p001$AFFY.Mouse430.2.probe),
                which(tra_data$AFFY.Mouse430.2.probe %in% top5_anno_14.5_16.5_p001$AFFY.Mouse430.2.probe),
                which(tra_data$AFFY.Mouse430.2.probe %in% top5_anno_16.5_18.5_p001$AFFY.Mouse430.2.probe)
)

deg_tra_data = tra_data[all_deg_tra, ]
deg_tra_data$Gene.name = str_c(deg_tra_data$Gene.name, "  (", deg_tra_data$max.tissue, ")")

#creating dataframe with mean expression levels of duplicates/triplicats

deg_tra_means = data.frame(deg_tra_data$Gene.name,
                           rowMeans(deg_tra_data[,3:5]),
                           rowMeans(deg_tra_data[,6:8]), 
                           rowMeans(deg_tra_data[,9:11]),
                           rowMeans(deg_tra_data[,12:14]),
                           rowMeans(deg_tra_data[,15:16]),
                           rowMeans(deg_tra_data[,17:18]),
                           rowMeans(deg_tra_data[,19:20]),
                           rowMeans(deg_tra_data[,21:22]),
                           deg_tra_data$max.tissue)

colnames(deg_tra_means) = c("X", "7.5", "8.5", "9.5", "10.5", "12.5", "14.5", "16.6", "18.5", "max.tissue")

#creating a long version of the dataframe

library(reshape2)
deg_tra_long = melt(deg_tra_means, id.vars = c("X", "max.tissue"))

#visualizing expression over time

ggplot(data = deg_tra_long, aes(x = variable, y = value, color = max.tissue)) +
  geom_point(size = 3, show.legend = FALSE) + 
  facet_wrap(~ X , nrow = 4) + 
  labs(x = "days of embryogenesis", y = "expression", title = "TRAs expression through embryogenesis"
       , subtitle = "5 most differentially expressed genes from each phase") 
ggsave("tras expression through embryogenesis.png", height = 12, width = 17)


